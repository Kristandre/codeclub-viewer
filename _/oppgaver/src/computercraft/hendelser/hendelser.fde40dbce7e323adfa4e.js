webpackJsonp([46,236],{

/***/ 473:
/*!***************************************************************************************************************************************************************************************************!*\
  !*** ./~/combine-loader/lib?{"frontmatter":["json","front-matter?onlyAttributes"],"content":["html","markdown-it","front-matter?onlyBody"]}!../oppgaver/src/computercraft/hendelser/hendelser.md ***!
  \***************************************************************************************************************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = {"frontmatter": __webpack_require__(/*! -!json!front-matter?onlyAttributes!../oppgaver/src/computercraft/hendelser/hendelser.md */ 474),"content": __webpack_require__(/*! -!html!markdown-it!front-matter?onlyBody!../oppgaver/src/computercraft/hendelser/hendelser.md */ 475)}

/***/ },

/***/ 475:
/*!************************************************************************************************************************************!*\
  !*** ./~/html-loader!./~/markdown-it-loader!./~/front-matter-loader?onlyBody!../oppgaver/src/computercraft/hendelser/hendelser.md ***!
  \************************************************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = "<section class=\"intro\" id=\"introduksjon\">\n<h1 class=\"intro\" id=\"introduksjon\">Introduksjon</h1>\n<p>I denne leksjonen skal vi se nærmere på hvordan datamaskinene bruker\nsåkalte hendelser for å reagere på ting som tastetrykk, museklikk og\nså videre. Etterhvert vil vi bli enda bedre kjent med datamaskinene,\nog lære hvordan vi flytter filer og programmer rundt omkring på en\ndatamaskin eller mellom forskjellige datamaskiner.</p>\n<figure><img src=\"" + __webpack_require__(/*! ./hendelser.png */ 476) + "\" alt=\"\" /></figure>\n</section>\n<section class=\"activity\" id=\"steg-1-skattejakt\">\n<h1 class=\"activity\" id=\"steg-1-skattejakt\">Steg 1: Skattejakt</h1>\n<p>Datamaskiner bruker noe som kalles hendelser for å registrere\ntastetrykk, museklikk og så videre. Vi vil først se på hvordan vi kan\nlage et enkelt spill hvor vi styrer en figur med piltastene.</p>\n<section class=\"check\" id=\"sjekkliste\">\n<h2 class=\"check\" id=\"sjekkliste\">Sjekkliste</h2>\n<ul>\n<li>\n<p>Start et nytt program ved å skrive <code>edit skattejakt</code>, skriv inn\ndet følgende:</p>\n<pre><code class=\"language-lua\"><span class=\"hljs-keyword\">local</span> x = <span class=\"hljs-number\">20</span>\n<span class=\"hljs-keyword\">local</span> y = <span class=\"hljs-number\">10</span>\n\nterm.clear()\nterm.setCursorPos(x, y)\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'O'</span>)\n</code></pre>\n<p>Lagre og kjør programmet. Skjønner du hva det gjør? Prøv å\nforandre verdiene av <code>x</code> og <code>y</code> og kjør igjen.</p>\n</li>\n<li>\n<p>Så langt skriver programmet bare ut en <code>O</code> på en gitt posisjon. Nå\nvil vi bruke hendelser for å kunne flytte denne figuren rundt på\nskjermen.</p>\n<p>For å vente på hendelser bruker vi <code>os.pullEvent()</code>. Vi vil\nspesielt vente på taste-hendelser. Disse hendelsene kalles <code>key</code> i\nComputerCraft. Forandre programmet ditt som under:</p>\n<pre><code class=\"language-lua\"><span class=\"hljs-keyword\">local</span> x = <span class=\"hljs-number\">20</span>\n<span class=\"hljs-keyword\">local</span> y = <span class=\"hljs-number\">10</span>\n\nterm.clear()\nterm.setCursorPos(x, y)\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'O'</span>)\n\n<span class=\"hljs-keyword\">local</span> hendelse, tast = <span class=\"hljs-built_in\">os</span>.pullEvent(<span class=\"hljs-string\">'key'</span>)    <span class=\"hljs-comment\">-- ny linje</span>\n<span class=\"hljs-built_in\">print</span>(hendelse)                               <span class=\"hljs-comment\">-- ny linje</span>\n<span class=\"hljs-built_in\">print</span>(tast)                                   <span class=\"hljs-comment\">-- ny linje</span>\n</code></pre>\n<p>Når du kjører programmet ditt nå blir programmet stående og vente\ntil du trykker en tast. Deretter skrives teksten <strong>key</strong> samt et\ntall til skjermen. Teksten <strong>key</strong> betyr bare at det var en\ntaste-hendelse som skjedde. Dette er ikke så veldig interessant\nfor oss nå, men kan være nyttig i andre programmet om man lytter\npå flere forskjellige hendelser.</p>\n<p>Tallet vi fikk er derimot veldig viktig. Hver tast på tastaturet\nhar sin egen tastekode. Prøv å kjøre programmet flere ganger, ser\ndu at om du trykker samme tast får du samme tall tilbake. For\neksempel er <code>A</code> alltid 30, mens <code>pil opp</code> alltid er 200.</p>\n</li>\n<li>\n<p>Vi trenger heldigvis ikke huske disse kodene. Biblioteket <code>keys</code>\nkjenner alle disse, og gjør at vi kan skrive for eksempel <code>keys.q</code>\nfor å representere <code>Q</code>-tasten. Endre programmet ditt igjen:</p>\n<pre><code class=\"language-lua\"><span class=\"hljs-keyword\">local</span> x = <span class=\"hljs-number\">20</span>\n<span class=\"hljs-keyword\">local</span> y = <span class=\"hljs-number\">10</span>\n\nterm.clear()\nterm.setCursorPos(x, y)\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'O'</span>)\n\n<span class=\"hljs-keyword\">local</span> hendelse, tast = <span class=\"hljs-built_in\">os</span>.pullEvent(<span class=\"hljs-string\">'key'</span>)\n<span class=\"hljs-keyword\">if</span> tast == keys.q <span class=\"hljs-keyword\">then</span>                        <span class=\"hljs-comment\">-- ny linje</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'Du trykket Q'</span>)                     <span class=\"hljs-comment\">-- ny linje</span>\n<span class=\"hljs-keyword\">else</span>                                          <span class=\"hljs-comment\">-- ny linje</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'Du trykket ikke Q'</span>)                <span class=\"hljs-comment\">-- ny linje</span>\n<span class=\"hljs-keyword\">end</span>                                           <span class=\"hljs-comment\">-- ny linje</span>\n</code></pre>\n</li>\n<li>\n<p>Vi kan nå lage en løkke hvor vi alltid sjekker hvilken tast som er\ntrykket. Dersom tasten <code>Q</code> trykkes avslutter vi løkken med <code>break</code>.</p>\n<pre><code class=\"language-lua\"><span class=\"hljs-keyword\">local</span> x = <span class=\"hljs-number\">20</span>\n<span class=\"hljs-keyword\">local</span> y = <span class=\"hljs-number\">10</span>\n\n<span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">true</span> <span class=\"hljs-keyword\">do</span>                                 <span class=\"hljs-comment\">-- ny linje</span>\n    term.clear()\n    term.setCursorPos(x, y)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'O'</span>)\n\n    <span class=\"hljs-keyword\">local</span> hendelse, tast = <span class=\"hljs-built_in\">os</span>.pullEvent(<span class=\"hljs-string\">'key'</span>)\n    <span class=\"hljs-keyword\">if</span> tast == keys.q <span class=\"hljs-keyword\">then</span>\n        <span class=\"hljs-keyword\">break</span>                                 <span class=\"hljs-comment\">-- endret linje</span>\n    <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>                                           <span class=\"hljs-comment\">-- ny linje</span>\n</code></pre>\n<p>Når du kjører dette programmet vil det tilsynelatende ikke skje\nnoe før du trykker <code>Q</code>, siden det er den eneste hendelsen vi\nhar kode som reagerer på.</p>\n</li>\n<li>\n<p>Vi er nå klare til å sjekke om piltastene trykkes, og flytte figuren\nrundt på skjermen. For å gjøre dette trenger vi bare å endre\nverdiene av <code>x</code> og <code>y</code> avhengig av hvilken piltast som trykkes.</p>\n<pre><code class=\"language-lua\"><span class=\"hljs-keyword\">local</span> x = <span class=\"hljs-number\">20</span>\n<span class=\"hljs-keyword\">local</span> y = <span class=\"hljs-number\">10</span>\n\n<span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">true</span> <span class=\"hljs-keyword\">do</span>\n    term.clear()\n    term.setCursorPos(x, y)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'O'</span>)\n\n    <span class=\"hljs-keyword\">local</span> hendelse, tast = <span class=\"hljs-built_in\">os</span>.pullEvent(<span class=\"hljs-string\">'key'</span>)\n    <span class=\"hljs-keyword\">if</span> tast == keys.q <span class=\"hljs-keyword\">then</span>\n        <span class=\"hljs-keyword\">break</span>\n    <span class=\"hljs-keyword\">end</span>\n\n    <span class=\"hljs-keyword\">if</span> tast == keys.right <span class=\"hljs-keyword\">then</span>                <span class=\"hljs-comment\">-- ny linje</span>\n        x = x + <span class=\"hljs-number\">1</span>                             <span class=\"hljs-comment\">-- ny linje</span>\n    <span class=\"hljs-keyword\">end</span>                                       <span class=\"hljs-comment\">-- ny linje</span>\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<figure>Når du kjører dette programmet vil du se at du kan bruke <code>pil høyre</code> til å bevege figuren mot høyre.</figure>\n</li>\n</ul>\n<section class=\"try\" id=\"prov-selv\">\n<h3 class=\"try\" id=\"prov-selv\">Prøv selv</h3>\n<p>De andre piltastene kan du programmere selv på samme måte. Du trenger\nda å sammenligne med kodene <code>keys.left</code>, <code>keys.down</code> og\n<code>keys.up</code>. Hvordan må du endre verdiene av <code>x</code> og <code>y</code>? Prøv deg frem!</p>\n</section>\n</section>\n<section class=\"check\" id=\"sjekkliste-2\">\n<h2 class=\"check\" id=\"sjekkliste-2\">Sjekkliste</h2>\n<ul>\n<li>\n<p>Til slutt vil vi legge til en skatt som figuren vår skal lete\netter. Vi bruker tilfeldige tall for å bestemme hvor skatten skal\nligge. Endre begynnelsen av programmet ditt som følger:</p>\n<pre><code class=\"language-lua\"><span class=\"hljs-keyword\">local</span> x = <span class=\"hljs-number\">20</span>\n<span class=\"hljs-keyword\">local</span> y = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-keyword\">local</span> skattX = <span class=\"hljs-built_in\">math</span>.random(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">50</span>)             <span class=\"hljs-comment\">-- ny linje</span>\n<span class=\"hljs-keyword\">local</span> skattY = <span class=\"hljs-built_in\">math</span>.random(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">18</span>)             <span class=\"hljs-comment\">-- ny linje</span>\n\n<span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">true</span> <span class=\"hljs-keyword\">do</span>\n    term.clear()\n    term.setCursorPos(skattX, skattY)         <span class=\"hljs-comment\">-- ny linje</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'X'</span>)                                <span class=\"hljs-comment\">-- ny linje</span>\n    term.setCursorPos(x, y)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'O'</span>)\n\n    <span class=\"hljs-keyword\">if</span> x == skattX <span class=\"hljs-keyword\">and</span> y == skattY <span class=\"hljs-keyword\">then</span>       <span class=\"hljs-comment\">-- ny linje</span>\n        term.setCursorPos(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>)               <span class=\"hljs-comment\">-- ny linje</span>\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'Du fant skatten!'</span>)             <span class=\"hljs-comment\">-- ny linje</span>\n        <span class=\"hljs-keyword\">break</span>                                 <span class=\"hljs-comment\">-- ny linje</span>\n    <span class=\"hljs-keyword\">end</span>                                       <span class=\"hljs-comment\">-- ny linje</span>\n\n    <span class=\"hljs-keyword\">local</span> hendelse, tast = <span class=\"hljs-built_in\">os</span>.pullEvent(<span class=\"hljs-string\">'key'</span>)\n    <span class=\"hljs-comment\">-- resten av programmet er som tidligere</span>\n</code></pre>\n<figure>Prøv spillet! Fungerer det som du hadde trodd? Klarer du å kanskje\nlegge til flere skatter?</figure>\n</li>\n</ul>\n<section class=\"try\" id=\"prov-selv-2\">\n<h3 class=\"try\" id=\"prov-selv-2\">Prøv selv</h3>\n<p>Ved hjelp av <code>local maxX, maxY = term.getSize()</code> kan du finne\nstørrelsen på skjermen. Kan du bruke dette til å begrense figuren din\nslik at den ikke kan gå av skjermen?</p>\n<p>En litt utfordrende oppgave: Prøv å skriv et tilsvarende program til\nen robot, men i stedet for at piltastene bare flytter en figur på\nskjermen skal piltastene flytte roboten!</p>\n</section>\n</section>\n</section>\n<section class=\"activity\" id=\"steg-2-hvordan-bevege-seg-rundt-i-filsystemet\">\n<h1 class=\"activity\" id=\"steg-2-hvordan-bevege-seg-rundt-i-filsystemet\">Steg 2: Hvordan bevege seg rundt i filsystemet</h1>\n<p>Datamaskiner organiserer informasjon i filer, og disse filene legges i\net filsystem. Dette filsystemet har du kanskje sett på en vanlig\ndatamaskin i programmene Windows Utforsker eller Finder på Mac. I\nComputerCraft bruker vi kommandolinjen for å se på filene. Vi skal her\nse på noen enkle kommandoer for å kopiere og flytte filer.</p>\n<section class=\"check\" id=\"sjekkliste-3\">\n<h2 class=\"check\" id=\"sjekkliste-3\">Sjekkliste</h2>\n<ul>\n<li>\n<p>Lag en ny <strong>Computer</strong>, sett den ut og start den ved å høyre-klikke\npå den.</p>\n</li>\n<li>\n<p>Kommandoen <code>dir</code> brukes for å se på innholdet i en katalog (dir er\nen forkortelse for <em>directory</em> som betyr <em>katalog</em>). Prøv den nå!\nSkriv <code>dir</code> og trykk enter.</p>\n<p>Datamaskinen svarer <strong>rom</strong> og <strong>skattejakt</strong>. Den første er en\nkatalog som inneholder alle de innebygde programmene på\ndatamaskinen (rom er en forkortelse for <em>Read Only Memory</em> som\nbetyr <em>kun-lese-minne</em> eller <em>skrivebeskyttet minne</em>). Vi skal se\nmer på denne katalogen senere.</p>\n</li>\n<li>\n<p>Når du bruker <code>dir</code> er det vanskelig å se forskjell på filer og\nkataloger. Til dette kan du bruke <code>type</code>. Prøv for eksempel å skriv\n<code>type skattejakt</code>. Datamaskinen vil da fortelle deg at\n<strong>skattejakt</strong> er en fil. Tilsvarende vil <code>type rom</code> fortelle deg at\n<strong>rom</strong> er en katalog.</p>\n</li>\n<li>\n<p>Du kan lage egne kataloger om du vil, for å organisere filene dine\nbedre. Skriv <code>mkdir mine_programmer</code>. Kommandoen <code>mkdir</code> lager nye\nkataloger (mkdir er en forkortelse for <em>make directory</em> som betyr\n<em>lag katalog</em>). Du kan bekrefte at katalogen <strong>mine_programmer</strong> ble\nlaget ved å skrive <code>dir</code> og <code>type mine_programmer</code>.</p>\n</li>\n<li>\n<p>Kommandoen <code>move</code> flytter filer. Skriv <code>move skattejakt mine_programmer</code>.  Dette flytter filen <strong>skattejakt</strong> inn i\nkatalogen <strong>mine_programmer</strong>. Hvis du nå skriver <code>dir</code> vil du se at\n<strong>skattejakt</strong> har blitt borte. For å sjekke at den ble flyttet\nriktig kan du skrive <code>dir mine_programmer</code>. Dette viser alle filene\nog katalogene som finnes inne i katalogen <strong>mine_programmer</strong>.</p>\n</li>\n<li>\n<p>Vi kan også flytte oss rundt i filsystemet. Dette vil si at vi\nendrer hvilken katalog som er utgangspunktet vårt (for eksempel når\nvi skriver <code>dir</code>). Til dette bruker vi <code>cd</code> (cd er en forkortelse\nfor <em>change directory</em> som betyr <em>endre katalog</em>). Skriv\n<code>cd mine_programmer</code>. Du vil se at det som står foran <code>&gt;</code> endrer seg\nfor å vise deg hvilken katalog du er i. Prøv også å skriv <code>dir</code> for å\nbekrefte at du er i samme katalogen som <strong>skattejakt</strong>.</p>\n<p>For å gå tilbake en katalog bruker du det spesielle navnet\n<strong>..</strong>. Skriv <code>cd ..</code>. Du vil nå komme tilbake til utgangspunktet.</p>\n</li>\n</ul>\n<section class=\"try\" id=\"prov-selv-3\">\n<h3 class=\"try\" id=\"prov-selv-3\">Prøv selv</h3>\n<p>Du har nå sett ganske mange kommandoer: <code>dir</code>, <code>edit</code>, <code>type</code>,\n<code>mkdir</code>, <code>move</code> og <code>cd</code>. I tillegg finnes også <code>delete</code> som kan brukes\ntil å slette filer og kataloger, og <code>copy</code> som brukes på samme måte\nsom <code>move</code>, men som kopierer filer i stedet for å flytte dem.</p>\n<p>Prøv å bruke disse kommandoene til å flytte deg litt rundt i\nfilsystemet, lag nye filer og kataloger, flytt dem rundt og så videre\ninntil du er ganske komfortabel med hvordan filsystemet fungerer.</p>\n</section>\n</section>\n</section>\n<section class=\"activity\" id=\"steg-3-et-bedre-passord-program\">\n<h1 class=\"activity\" id=\"steg-3-et-bedre-passord-program\">Steg 3: Et bedre passord-program</h1>\n<figure>Vi har tidligere laget et passord-program. Dette passord-programmet\nhar et par svakheter.</figure>\n<ol>\n<li>\n<p>Programmet må startes manuelt ved å skrive <code>passord</code> etter at\ndatamaskinen er skrudd på.</p>\n</li>\n<li>\n<p>I stedet for å skrive passordet kan man bare trykke <code>Ctrl-T</code> for å\nstoppe programmet, og se inni programmet for å finne det hemmelige\npassordet.</p>\n</li>\n</ol>\n<figure>Vi skal her se på et par triks for å gjøre passord-programmet litt\ntryggere.</figure>\n<figure><img src=\"" + __webpack_require__(/*! ./passord.png */ 477) + "\" alt=\"\" /></figure>\n<section class=\"check\" id=\"sjekkliste-4\">\n<h2 class=\"check\" id=\"sjekkliste-4\">Sjekkliste</h2>\n<ul>\n<li>\n<p>Om du ikke allerede har gjort det: Sett opp en datamaskin ved siden\nav en dør og legg inn passord-programmet datamaskinen, det vil si\nskriv <code>edit passord</code> og skriv inn følgende:</p>\n<pre><code class=\"language-lua\"><span class=\"hljs-keyword\">local</span> passord = <span class=\"hljs-string\">'kodeklubben'</span>\n\n<span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">true</span> <span class=\"hljs-keyword\">do</span>\n    term.clear()\n    term.setCursorPos(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'Hva er passordet?'</span>)\n    svar = read(<span class=\"hljs-string\">'*'</span>)\n\n    <span class=\"hljs-keyword\">if</span> svar == passord <span class=\"hljs-keyword\">then</span>\n        redstone.setOutput(<span class=\"hljs-string\">'left'</span>, <span class=\"hljs-keyword\">true</span>)\n        sleep(<span class=\"hljs-number\">5</span>)\n        redstone.setOutput(<span class=\"hljs-string\">'left'</span>, <span class=\"hljs-keyword\">false</span>)\n    <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p>Kjør programmet, og sjekk at det virker som det skal.</p>\n</li>\n<li>\n<p>Når en datamaskin starter sjekker den først om det finnes et program\nsom heter <code>startup</code> (<em>startup</em> betyr <em>oppstart</em>). Om den finner\ndette programmet kjøres dette før noe annet skjer. Det betyr at om\nvi kaller passord-programmet vårt for <strong>startup</strong> så vil det kjøre\nautomatisk.</p>\n<p>Skriv <code>move passord startup</code>. Dette endre navnet på\npassord-programmet vårt. Vi kan nå starte datamaskinen på nytt ved\nå skrive <code>reboot</code>. Datamaskinen vil nå direkte spørre deg om\npassordet.</p>\n</li>\n<li>\n<p>Trykk <code>Ctrl-T</code> for å stanse passord-programmet. At vi kan bruke\n<code>Ctrl-T</code> til å avslutte programmer er noe <code>os.pullEvent</code> gjør for\noss automatisk uten at vi trenger å gjøre noe. Dersom vi ikke vil at\ndette skal være mulig kan vi bytte ut <code>os.pullEvent</code> med noe som\nheter <code>os.pullEventRaw</code>. Disse fungerer omtrent på samme måte, men\nden siste bryr seg ikke om <code>Ctrl-T</code>.</p>\n<figure>Skriv <code>edit startup</code> og legg til en linje øverst i koden din:</figure>\n<pre><code class=\"language-lua\"><span class=\"hljs-built_in\">os</span>.pullEvent = <span class=\"hljs-built_in\">os</span>.pullEventRaw                <span class=\"hljs-comment\">-- ny linje</span>\n<span class=\"hljs-keyword\">local</span> passord = <span class=\"hljs-string\">'kodeklubben'</span>\n\n<span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">true</span> <span class=\"hljs-keyword\">do</span>\n    term.clear()\n    term.setCursorPos(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'Hva er passordet?'</span>)\n    svar = read(<span class=\"hljs-string\">'*'</span>)\n\n    <span class=\"hljs-keyword\">if</span> svar == passord <span class=\"hljs-keyword\">then</span>\n        redstone.setOutput(<span class=\"hljs-string\">'left'</span>, <span class=\"hljs-keyword\">true</span>)\n        sleep(<span class=\"hljs-number\">5</span>)\n        redstone.setOutput(<span class=\"hljs-string\">'left'</span>, <span class=\"hljs-keyword\">false</span>)\n    <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n</li>\n<li>\n<p>Du kan nå starte datamaskinen på nytt igjen med <code>reboot</code>. Nå har du\nen datamaskin som bare spør om passord hele tiden!</p>\n<p>Vær litt forsiktig med dette siden det ikke er noen enkel måte å\nfå datamaskinen til å gjøre noe annet enn å spørre om passord! Men\ndet du lærer i de to neste stegene kan være nyttig.</p>\n</li>\n</ul>\n</section>\n</section>\n<section class=\"activity\" id=\"steg-4-bruk-av-diskettstasjoner\">\n<h1 class=\"activity\" id=\"steg-4-bruk-av-diskettstasjoner\">Steg 4: Bruk av diskettstasjoner</h1>\n<figure>Vi skal nå se hvordan vi kan bruke disketter og diskettstasjoner til å\nflytte filer mellom forskjellige datamaskiner.</figure>\n<figure><img src=\"" + __webpack_require__(/*! ./diskettstasjon.png */ 478) + "\" alt=\"\" /></figure>\n<section class=\"check\" id=\"sjekkliste-5\">\n<h2 class=\"check\" id=\"sjekkliste-5\">Sjekkliste</h2>\n<ul>\n<li>\n<p>Lag en <strong>Disk Drive</strong> (diskettstasjon) og plasser den inntil\ndatamaskinen din. Hent også en <strong>Floppy Disk</strong> (diskett) fra\ninventory'et ditt (du kan velge hvilken farge som helst).</p>\n</li>\n<li>\n<figure>Åpne diskettstasjonen ved å høyre-klikke på den. Sett inn disketten\nved å flytte den opp til den ledige slot'en øverst.</figure>\n</li>\n<li>\n<p>Start datamaskinen din ved å høyre-klikke på den. Skriv <code>dir</code>. Du\nvil se at det nå finnes en ny katalog som heter <strong>disk</strong>. Dette er\ndisketten vi nettopp satte inn.</p>\n</li>\n<li>\n<p>La oss lage et enkelt program. Skriv <code>edit navn</code> og skriv inn\nfølgende:</p>\n<pre><code class=\"language-lua\"><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'Hva heter du?'</span>)\nnavn = read()\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'Hei, '</span> .. navn)\n</code></pre>\n<figure>Test at programmet virker ved å skrive <code>navn</code>.</figure>\n</li>\n<li>\n<p>Vi kan nå kopiere dette programmet over til disketten ved å skrive\n<code>copy navn disk</code>.</p>\n</li>\n<li>\n<p>Vi kan nå ta med oss dette programmet til en annen datamaskin:</p>\n<p><strong>1</strong>: Steng datamaskinen.</p>\n<p><strong>2</strong>: Åpne diskettstasjonen, og flytt disketten til inventory'et\nditt.</p>\n<p><strong>3</strong>: Lag en ny datamaskin, også denne med en diskettstasjon\ninntil seg.</p>\n<p><strong>4</strong>: Sett disketten inn i den nye diskettstasjonen.</p>\n<p><strong>5</strong>: Åpne den nye datamaskinen. Skriv <code>dir</code> og <code>dir disk</code> slik\nat du ser at programmet ditt er flyttet til den nye datamaskinen\nved hjelp av disketten.</p>\n</li>\n<li>\n<p>Vi kan nå kopiere programmet fra disketten til denne nye\ndatamaskinen slik at vi kan ta med disketten videre og likevel bruke\nprogrammet. For å kopiere filen kan du skrive <code>copy disk/navn .</code>.\nLegg merke til at det skal være et <code>.</code> på slutten. Dette er et\nspesielt katalognavn som alltid betyr <em>denne katalogen</em>. Skriv\ntilslutt <code>dir</code> og <code>navn</code> for å bekrefte at programmet har blitt\nkopiert.</p>\n</li>\n</ul>\n<section class=\"protip\" id=\"hva-er-en-diskett\">\n<h3 class=\"protip\" id=\"hva-er-en-diskett\">Hva er en diskett?</h3>\n<p>Disketter var en vanlig måte å lagre programmer og filer på fra de ble\nintrodusert på 1970-tallet og fram til tidlig 2000-tall. Disketter var\nogså den vanligste måten å overføre filer mellom forskjellige\ndatamaskiner på. I nyere tid har internett, samt USB minnepenner og\neksterne harddisker overtatt for diskettenes bruksområder.</p>\n<figure>Morsomt nok, lever likevel diskettene videre som det mest vanlige\nsymbolet for å lagre filer i forskjellige programmer.</figure>\n</section>\n</section>\n</section>\n<section class=\"activity\" id=\"steg-5-skrive-kode-utenfor-computercraft\">\n<h1 class=\"activity\" id=\"steg-5-skrive-kode-utenfor-computercraft\">Steg 5: Skrive kode utenfor ComputerCraft</h1>\n<figure>Vi kan også se på og endre programmene våre utenfor Minecraft og\nComputerCraft. Dette kan være nyttig på flere måter.</figure>\n<p><strong>1</strong>: Om vi ved et uhell ødelegger en datamaskin kan vi hente tilbake\nprogrammene på den datamaskinen, og kopiere de til en annen\ndatamaskin.</p>\n<p><strong>2</strong>: Vi kan raskere kopiere filer mellom datamaskiner enn om vi\nbruker disketter som vi lærte i forrige steg.</p>\n<p><strong>3</strong>: Programmet <code>edit</code> som vi bruker til å skrive programmer er ikke\nså lett å skrive i. Det er enklere å bruke for eksempel Notepad eller\nandre tekstprogrammer vi har installert.</p>\n<p>Som du kanskje vet blir omtrent alle data i Minecraft lagret i en\n<em>Minecraft</em>-katalog på datamaskinen din. For å finne denne kan du\ngjøre følgende (utenfor Minecraft):</p>\n<p><strong>Windows</strong>: Under Windows finner du <em>Minecraft</em>-katalogen under\n<code>%appdata%\\.minecraft</code>. Søk etter <code>%appdata%</code> i en utforsker eller i\nkjør-feltet etter å ha klikket start-knappen.</p>\n<p><strong>Mac OS X</strong>: Under Mac ligger <em>Minecraft</em>-katalogen i\n<code>Library/Application Support/minecraft/</code> under hjemmekatalogen din. På\nnorsk heter <code>Library</code> <code>Bibliotek</code>.</p>\n<p><strong>Linux</strong>: På Linux finner du <em>Minecraft</em>-katalogen som en skjult\nkatalog <code>.minecraft</code> rett under hjemmekatalogen din.</p>\n<p>Finn <em>Minecraft</em>-katalogen din i en filutforsker. Gå videre til\nkatalogen <code>saves</code>, deretter velger du navnet på den verden du spiller\nnå, og til slutt katalogen <code>computer</code>. Denne katalogen inneholder\nflere kataloger som bare har et tall som navn. Disse katalogene\nrepresenterer de forskjellige datamaskinene i spillet ditt. Du vil\nogså se en katalog som heter disk, som også har nummererte kataloger\ninne i seg. Disse representerer diskettene i spillet ditt.</p>\n<figure><img src=\"" + __webpack_require__(/*! ./tekstprogram.png */ 479) + "\" alt=\"\" /></figure>\n<section class=\"check\" id=\"sjekkliste-6\">\n<h2 class=\"check\" id=\"sjekkliste-6\">Sjekkliste</h2>\n<ul>\n<li>\n<p>Gå tilbake til Minecraft-spillet ditt. Åpne en datamaskin hvor du\nhar lagret et program. Skriv <code>id</code> og trykk enter. Dette vil fortelle\ndeg hvilket nummer denne datamaskinen er.</p>\n</li>\n<li>\n<p>I filutforskeren kan du nå finne katalogen som representerer denne\ndatamaskinen (se over). Åpne et av programmene i et tekstprogram som\nfor eksempel Notepad. Gjør en liten endring i programmet ditt.</p>\n</li>\n<li>\n<p>Gå tilbake til Minecraft igjen. Åpne det samme programmet med\n<code>edit</code>-kommandoen. Ser du endringen du nettopp gjorde?</p>\n</li>\n<li>\n<p>I filutforskeren kan du også kopiere filer mellom forskjellige\ndatamaskiner. Prøv å kopiere programmet du nettopp endret til en\nannen datamaskin. Finner du igjen dette programmet inne i Minecraft\nogså?</p>\n</li>\n</ul>\n<section class=\"protip\" id=\"flytt-en-datamaskin\">\n<h3 class=\"protip\" id=\"flytt-en-datamaskin\">Flytt en datamaskin</h3>\n<p>Om du oppdager at du må flytte en datamaskin må du være litt\nforsiktig, siden om du bare ødelegger en datamaskin og setter ut en ny\ner alle programmene borte. Du kan da bruke metoden i denne seksjonen\nfor å kopiere programmene tilbake, men det finnes en bedre måte.</p>\n<p>Med kommandoen <code>label</code> kan vi gi en datamaskin navn. Prøv for eksempel\nå skriv <code>label set snakker</code>. Dette gir denne datamaskinen navnet\n<strong>snakker</strong>, du kan gi maskinen akkurat det navnet du vil. Om du nå\nødelegger maskinen vil du se at du kan plukke den opp igjen, og at den\nda legger seg i inventory'et ditt med navnet <strong>snakker</strong>. Om du nå\nsetter ut maskinen igjen vil du se at alle programmene du har skrevet\nfortsatt finnes på maskinen.</p>\n</section>\n</section>\n</section>\n<section class=\"activity\" id=\"steg-6-de-innebygde-programmene\">\n<h1 class=\"activity\" id=\"steg-6-de-innebygde-programmene\">Steg 6: De innebygde programmene</h1>\n<p>Vi skal nå kikke raskt på katalogen <strong>rom</strong>. Dette er som nevnt\nkatalogen som inneholder de innebygde programmene på datamaskinen. Ved\nhjelp av kommandoene vi har lært kan vi nå se hvordan disse\nprogrammene er programmert, og til og med lage våre egne versjoner av\ndem.</p>\n<section class=\"check\" id=\"sjekkliste-7\">\n<h2 class=\"check\" id=\"sjekkliste-7\">Sjekkliste</h2>\n<ul>\n<li>\n<p>Bruk <code>cd</code> kommandoen til å gå først til <strong>rom</strong>, deretter\n<strong>programs</strong> og til slutt til <strong>fun</strong>-katalogen. Bruk gjerne <code>dir</code>\nunderveis for å se på hvilke andre filer og kataloger som finnes.</p>\n</li>\n<li>\n<p>Denne <strong>fun</strong>-katalogen inneholder flere spill og programmer. La oss\nse på <strong>hello</strong> som er det enkleste programmet. Dette er en variant\nav <strong>heisann</strong> som vi skrev tidligere.</p>\n<p>Prøv først å kjøre programmet ved å skrive <code>hello</code>. Teksten\n<strong>Hello World!</strong> skrives til skjermen, ett tegn om gangen.</p>\n</li>\n<li>\n<p>La oss se på koden til <strong>hello</strong>. Skriv <code>edit hello</code>. Du vil se det\nfølgende:</p>\n<pre><code class=\"language-lua\"><span class=\"hljs-keyword\">if</span> term.isColour() <span class=\"hljs-keyword\">then</span>\n    term.setTextColour( <span class=\"hljs-number\">2</span>^<span class=\"hljs-built_in\">math</span>.random(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">15</span>) )\n<span class=\"hljs-keyword\">end</span>\ntextutils.slowPrint( <span class=\"hljs-string\">\"Hello World!\"</span> )\nterm.setTextColour( colours.white )\n</code></pre>\n<figure>Ser du hvilken kodelinje det er som har ansvaret for å skrive\nteksten til skjermen?</figure>\n</li>\n<li>\n<p>Nå vil vi endre teksten <strong>Hello World!</strong> til noe annet. Men om du\nprøver å bare endre på teksten vil du oppdage at det ikke går\nan. Videre, om du trykker <code>Ctrl</code> vil du se at valget <code>Save</code> er\nborte. Dette er fordi vi ser på en fil som ligger i <strong>rom</strong>, det\nskrivebeskyttede minnet.</p>\n</li>\n<li>\n<p>Hvis vi vil lage vår egen versjon av <strong>hello</strong> må vi først kopiere\nfilen ut av <strong>rom</strong>. Skriv <code>copy hello ../../../</code>. Den litt mystiske\nrekken av <code>..</code> og <code>/</code> betyr at vi kopierer filen tre nivåer\nopp. Husk at <code>..</code> betydde at man går en katalog opp.</p>\n</li>\n<li>\n<p>Nå vil vi flytte oss tilbake til utgangspunktet eller roten av\nfilsystemet. Skriv <code>cd ..</code> tre ganger. Om du nå skriver <code>dir</code> skal\ndu se filen <strong>hello</strong> i tillegg til <strong>rom</strong>.</p>\n</li>\n<li>\n<p>Nå kan du skrive <code>edit hello</code> og endre teksten <strong>Hello World!</strong> til\nnoe annet, kanskje den kan si <strong>Hei</strong> og deretter navnet ditt? Lagre\nog lukk filen, og skriv deretter <code>hello</code> for å se om du fikk det\ntil.</p>\n</li>\n</ul>\n<section class=\"protip\" id=\"resten-av-programmet\">\n<h3 class=\"protip\" id=\"resten-av-programmet\">Resten av programmet</h3>\n<p>Vi har så langt bare brydd oss om linje 4 i <strong>hello</strong>-programmet.\nSkjønner du hva de andre linjene gjør?</p>\n<p>Ut fra kommandoene <code>term.isColour()</code> og <code>term.setTextColour()</code> kan vi\nkanskje gjette på at de har noe med tekstfargen å gjøre? Faktisk sier\nde første tre linjene at dersom programmet kjøres på datamaskin som\nhar farger så skal tekstfargen settes til en tilfeldig farge. Den\nsiste linjen setter tekstfargen tilbake til hvit.</p>\n<p>Om du vil se hvordan dette virker kan du prøve å lage en <strong>Advanced\nComputer</strong>, og kjøre programmet <code>hello</code> på den.</p>\n</section>\n<section class=\"try\" id=\"prov-selv-4\">\n<h3 class=\"try\" id=\"prov-selv-4\">Prøv selv</h3>\n<p>Prøv å se på noen av de andre programmene du kjenner til, som for\neksempel <code>cd</code>, <code>go</code> eller <code>refuel</code>. Du må kanskje lete litt i\nkatalogstrukturen for å finne dem. Disse programmene er litt mer\nkompliserte enn de vi har laget så langt. Prøv likevel å se om du\nskjønner hva deler av koden gjør. Finner du for eksempel kodelinjen\nsom bytter katalog i <code>cd</code> eller linjen som rapporterer fuelnivået i\n<code>refuel</code>?</p>\n</section>\n</section>\n</section>\n<section class=\"activity\" id=\"steg-7-andre-typer-datamaskiner\">\n<h1 class=\"activity\" id=\"steg-7-andre-typer-datamaskiner\">Steg 7: Andre typer datamaskiner</h1>\n<p>Vi har så langt stort sett bare brukt vanlige datamaskiner,\n<strong>Computer</strong>. Men om du ser i inventory'et ditt ser du at det finnes\nflere andre typer datamaskiner, inkludert <strong>Advanced Computer</strong> og\n<strong>Pocket Computer</strong>. Disse virker typisk ganske likt en vanlig\ndatamaskin, men har noen ekstra muligheter.</p>\n<section class=\"check\" id=\"sjekkliste-8\">\n<h2 class=\"check\" id=\"sjekkliste-8\">Sjekkliste</h2>\n<ul>\n<li>\n<p>Lag og start en <strong>Advanced Computer</strong>. De viktigste ekstra\nmulighetene på denne typen datamaskin er at den kan vise farger og\ndu kan bruke musen.</p>\n</li>\n<li>\n<figure>La oss lage et enkelt tegneprogram. Skriv <code>edit tegne</code>, og skriv</figure>\n<pre><code class=\"language-lua\">term.clear()\n\n<span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">true</span> <span class=\"hljs-keyword\">do</span>\n    <span class=\"hljs-keyword\">local</span> hendelse, knapp, x, y = <span class=\"hljs-built_in\">os</span>.pullEvent(<span class=\"hljs-string\">'mouse_click'</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'Du klikket '</span> .. knapp)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'Posisjon: x = '</span> .. x .. <span class=\"hljs-string\">', y = '</span> .. y)\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p>Kjør programmet og prøv å klikk litt rundt omkring på skjermen.\nBruk både venstre og høyre museknapp. Skjønner du hvordan\nmuseklikk-hendelser fungerer? Bruk <code>Ctrl-T</code> for å avslutte\nprogrammet.</p>\n</li>\n<li>\n<p>La oss legge til litt kode som tegner på skjermen når du\nvenstre-klikker. Vi kan også bruke høyre-klikk til å viske vekk det\nsom er tegnet. Endre koden til</p>\n<pre><code class=\"language-lua\">term.clear()\n\n<span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">true</span> <span class=\"hljs-keyword\">do</span>\n    <span class=\"hljs-keyword\">local</span> hendelse, knapp, x, y = <span class=\"hljs-built_in\">os</span>.pullEvent(<span class=\"hljs-string\">'mouse_click'</span>)\n    term.setCursorPos(x, y)                   <span class=\"hljs-comment\">-- ny linje</span>\n\n    <span class=\"hljs-keyword\">if</span> knapp == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">then</span>                        <span class=\"hljs-comment\">-- ny linje</span>\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'#'</span>)                            <span class=\"hljs-comment\">-- ny linje</span>\n    <span class=\"hljs-keyword\">end</span>                                       <span class=\"hljs-comment\">-- ny linje</span>\n\n    <span class=\"hljs-keyword\">if</span> knapp == <span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">then</span>                        <span class=\"hljs-comment\">-- ny linje</span>\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">' '</span>)                            <span class=\"hljs-comment\">-- ny linje</span>\n    <span class=\"hljs-keyword\">end</span>                                       <span class=\"hljs-comment\">-- ny linje</span>\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n</li>\n</ul>\n<section class=\"try\" id=\"prov-selv-5\">\n<h3 class=\"try\" id=\"prov-selv-5\">Prøv selv</h3>\n<p>Kan du legge til farger i tegneprogrammet? Se tilbake på\n<code>hello</code>-programmet hvordan du kan bruke <code>term.setTextColour()</code> til å\nendre farge. Kanskje du kan bruke talltastene til å endre farge?</p>\n<p>Når du vil sjekke forskjellige typer hendelser, for eksempel både\nmuseklikk og tastetrykk, er det best å bruke <code>os.pullEvent()</code> uten\nnavnet på en hendelse i parantes. Deretter kan du sjekke variabelen\n<code>hendelse</code> for hvilken hendelse som faktisk skjedde.</p>\n<p>Etterhvert som du tegner merker du at du må klikke hver gang du vil\ntegne et punkt. Det ville vært bedre om man kunne bare klikket en\ngang, og deretter dra musen rundt. Se på hendelsen <code>mouse_drag</code> og\nprøv å forbedre programmet ditt.</p>\n</section>\n</section>\n</section>\n";

/***/ },

/***/ 476:
/*!*************************************************************!*\
  !*** ../oppgaver/src/computercraft/hendelser/hendelser.png ***!
  \*************************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "_/oppgaver/src/computercraft/hendelser/hendelser.27e3aa.png";

/***/ },

/***/ 477:
/*!***********************************************************!*\
  !*** ../oppgaver/src/computercraft/hendelser/passord.png ***!
  \***********************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "_/oppgaver/src/computercraft/hendelser/passord.86628b.png";

/***/ },

/***/ 478:
/*!******************************************************************!*\
  !*** ../oppgaver/src/computercraft/hendelser/diskettstasjon.png ***!
  \******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "_/oppgaver/src/computercraft/hendelser/diskettstasjon.2afed5.png";

/***/ },

/***/ 479:
/*!****************************************************************!*\
  !*** ../oppgaver/src/computercraft/hendelser/tekstprogram.png ***!
  \****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "_/oppgaver/src/computercraft/hendelser/tekstprogram.35c41d.png";

/***/ }

});
//# sourceMappingURL=hendelser.fde40dbce7e323adfa4e.js.map