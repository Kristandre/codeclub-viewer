webpackJsonp([44,236],{

/***/ 455:
/*!*******************************************************************************************************************************************************************************************************!*\
  !*** ./~/combine-loader/lib?{"frontmatter":["json","front-matter?onlyAttributes"],"content":["html","markdown-it","front-matter?onlyBody"]}!../oppgaver/src/computercraft/bygg_et_hus/bygg_et_hus.md ***!
  \*******************************************************************************************************************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = {"frontmatter": __webpack_require__(/*! -!json!front-matter?onlyAttributes!../oppgaver/src/computercraft/bygg_et_hus/bygg_et_hus.md */ 456),"content": __webpack_require__(/*! -!html!markdown-it!front-matter?onlyBody!../oppgaver/src/computercraft/bygg_et_hus/bygg_et_hus.md */ 457)}

/***/ },

/***/ 457:
/*!****************************************************************************************************************************************!*\
  !*** ./~/html-loader!./~/markdown-it-loader!./~/front-matter-loader?onlyBody!../oppgaver/src/computercraft/bygg_et_hus/bygg_et_hus.md ***!
  \****************************************************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = "<section class=\"intro\" id=\"introduksjon\">\n<h1 class=\"intro\" id=\"introduksjon\">Introduksjon</h1>\n<p>I denne leksjonen vil vi se litt på hvordan vi kan få en robot til å\nbygge et hus for oss. Underveis vil vi lære hvordan vi kan bruke\nløkker og funksjoner for å gjenta ting som gjøres flere ganger.</p>\n<figure><img src=\"" + __webpack_require__(/*! ./bygg_et_hus.png */ 458) + "\" alt=\"\" /></figure>\n</section>\n<section class=\"activity\" id=\"steg-1-prov-selv-forst\">\n<h1 class=\"activity\" id=\"steg-1-prov-selv-forst\">Steg 1: Prøv selv først</h1>\n<p>Vi har tidligere lært om hvordan roboter behøver fuel for å kjøre og\nbyggemateriell for å bygge. Pass på at roboten din har nok fuel mens\ndu gjør oppgavene under.</p>\n<p>Tidligere har vi sett hvordan vi bruker <code>turtle</code>-biblioteket for å få\nroboter til å gjøre forskjellige ting. Spesielt bruker vi kommandoene</p>\n<p><code>turtle.forward()</code>, <code>turtle.back()</code>, <code>turtle.turnLeft()</code>,\n<code>turtle.turnRight()</code>, <code>turtle.up()</code>, <code>turtle.down()</code></p>\n<p>for å flytte roboten. Videre kan vi bruke <code>turtle.place()</code> eller\n<code>turtle.placeDown()</code> for å plassere ut en kloss, og vi har sett at vi\nkan bruke <code>for</code>-løkker for å gjenta ting.</p>\n<section class=\"check\" id=\"sjekkliste\">\n<h2 class=\"check\" id=\"sjekkliste\">Sjekkliste</h2>\n<ul>\n<li>\n<figure>Lag en robot, gi den fuel og legg en del byggemateriell i robotens\ninventory.</figure>\n</li>\n<li>\n<figure>Lag et nytt program, <code>edit byggmitthus</code>, og skriv den følgende koden:</figure>\n<pre><code class=\"language-lua\"><span class=\"hljs-keyword\">for</span> i = <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span> <span class=\"hljs-keyword\">do</span>\n    turtle.back()\n    turtle.place()\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p>Kjør programmet. Bygger roboten en liten vegg av klosser?</p>\n</li>\n</ul>\n<section class=\"try\" id=\"prov-selv\">\n<h3 class=\"try\" id=\"prov-selv\">Prøv selv</h3>\n<p>Jobb videre med <code>bygghus</code>-programmet, og se om du klarer å utvide det\nslik at roboten bygger et enkelt hus med fire vegger og tak. Bruk litt\ntid på denne oppgaven slik at du får tenkt gjennom hva som kreves for\nå bygge et enkelt hus.</p>\n<p>Et par små tips:</p>\n<ul>\n<li>\n<p>Det er nok å bruke kommandoene vi har nevnt så langt.</p>\n</li>\n<li>\n<p>Du vil helst bruke flere for-løkker. For at dette skal virke må du\nbruke forskjellige variabler, det vil si at du må bytte ut <code>i</code> men\nandre bokstaver eller variabelnavn i de andre løkkene du lager.</p>\n</li>\n<li>\n<p>For å lage dør eller vinduer i huset ditt vil det enkleste være å\nbruke <code>if</code>-tester for å sjekke hvor på huset roboten bygger.</p>\n</li>\n</ul>\n</section>\n</section>\n<section class=\"check\" id=\"sjekkliste-2\">\n<h2 class=\"check\" id=\"sjekkliste-2\">Sjekkliste</h2>\n<ul>\n<li>\n<figure>Når du har laget et enkelt hus så vis det frem til de andre. Hvilke\nproblemer fikk dere underveis?</figure>\n<p>Ingen skriver programmer riktig første gangen, og det er veldig\nnyttig å diskutere både hvordan man løser en utfordring, og hvilke\nmetoder som ikke virker.</p>\n</li>\n</ul>\n<p>I de neste stegene vil vi utvikle et mer avansert program for\nhusbyggeroboten vår. Underveis vil vi lære om noen nye kommandoer og\nkonsepter som gjør at programmet blir både kraftigere og enklere.</p>\n</section>\n</section>\n<section class=\"activity\" id=\"steg-2-flyvende-robot\">\n<h1 class=\"activity\" id=\"steg-2-flyvende-robot\">Steg 2: Flyvende robot</h1>\n<p>Et problem du kanskje allerede har oppdaget er at roboten innimellom\nkrasjer i ting, og derfor ender opp litt andre steder enn du hadde\ntenkt. Et eksempel på dette er i den følgende koden, hvor meningen var\nå bygge grunnmuren til et hus.</p>\n<section class=\"check\" id=\"sjekkliste-3\">\n<h2 class=\"check\" id=\"sjekkliste-3\">Sjekkliste</h2>\n<ul>\n<li>\n<figure>Skriv programmet <code>grunnmur</code> med koden</figure>\n<pre><code class=\"language-lua\"><span class=\"hljs-keyword\">for</span> i = <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span> <span class=\"hljs-keyword\">do</span>\n    <span class=\"hljs-keyword\">for</span> j = <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span> <span class=\"hljs-keyword\">do</span>\n        turtle.back()\n        turtle.place()\n    <span class=\"hljs-keyword\">end</span>\n    turtle.turnLeft()\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p>Lagre og kjør programmet? Ser du problemet?</p>\n</li>\n<li>\n<p>På slutten av byggingen av grunnmuren krasjer roboten inn i muren vi\nallerede har bygd, slik at den ikke får bygd den siste klossen. En\nsmart måte å unngå dette problemet på er å la roboten fly over\nbakken, mens den plasserer klosser under seg med\n<code>turtle.placeDown()</code>. Dette har den ekstra fordelen at vi kan la\nroboten gå fremover i stedet for bakover, som jo er mer logisk.</p>\n<p>Endre programmet som følger:</p>\n<pre><code class=\"language-lua\">turtle.up()                                   <span class=\"hljs-comment\">-- ny linje</span>\n<span class=\"hljs-keyword\">for</span> j = <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span> <span class=\"hljs-keyword\">do</span>\n    <span class=\"hljs-keyword\">for</span> i = <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span> <span class=\"hljs-keyword\">do</span>\n        turtle.forward()                      <span class=\"hljs-comment\">-- endret linje</span>\n        turtle.placeDown()                    <span class=\"hljs-comment\">-- endret linje</span>\n    <span class=\"hljs-keyword\">end</span>\n    turtle.turnLeft()\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p>Når du kjører programmet nå klarer roboten å bygge hele firkanten\nuten å krasje! Vi vil bruke <code>turtle.placeDown()</code> i resten av denne\nleksjonen.</p>\n</li>\n</ul>\n</section>\n</section>\n<section class=\"activity\" id=\"steg-3-bygg-en-vegg\">\n<h1 class=\"activity\" id=\"steg-3-bygg-en-vegg\">Steg 3: Bygg en vegg</h1>\n<p>Når vi skal skrive større programmer (som for eksempel et som bygger\net hus) er det lurt å prøve dele programmer i deloppgaver som er\nrelativt enkle. Da kan vi heller kode disse deloppgavene som typisk er\nenklere enn hele det store programmet.</p>\n<p>En naturlig deloppgave når vi skal bygge et hus er å bygge en vegg. La\noss starte med det! Husk å teste at robotprogrammet ditt virker\netterhvert som du skriver det inn.</p>\n<section class=\"check\" id=\"sjekkliste-4\">\n<h2 class=\"check\" id=\"sjekkliste-4\">Sjekkliste</h2>\n<ul>\n<li>\n<figure>Lag et nytt program <code>bygghus</code>. Vi begynner med en enkel stripe:</figure>\n<pre><code class=\"language-lua\">turtle.up()\n<span class=\"hljs-keyword\">for</span> i = <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span> <span class=\"hljs-keyword\">do</span>\n    turtle.placeDown()\n    turtle.forward()\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n</li>\n<li>\n<p>For å bygge en vegg vil vi bygge flere slike striper på toppen av\nhverandre. En enkel måte å gjøre dette på er å la roboten rygge\ntilbake med <code>turtle.back()</code> for å bygge neste stripe.</p>\n<pre><code class=\"language-lua\"><span class=\"hljs-keyword\">for</span> j = <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span> <span class=\"hljs-keyword\">do</span>                               <span class=\"hljs-comment\">-- ny linje</span>\n    turtle.up()\n    <span class=\"hljs-keyword\">for</span> i = <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span> <span class=\"hljs-keyword\">do</span>\n        turtle.placeDown()\n        turtle.forward()\n    <span class=\"hljs-keyword\">end</span>\n\n    <span class=\"hljs-keyword\">for</span> i = <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span> <span class=\"hljs-keyword\">do</span>                           <span class=\"hljs-comment\">-- ny linje</span>\n        turtle.back()                         <span class=\"hljs-comment\">-- ny linje</span>\n    <span class=\"hljs-keyword\">end</span>                                       <span class=\"hljs-comment\">-- ny linje</span>\n<span class=\"hljs-keyword\">end</span>                                           <span class=\"hljs-comment\">-- ny linje</span>\n</code></pre>\n</li>\n<li>\n<p>Før vi fortsetter med programmet vårt vil vi også introdusere et par\nvariabler som kan forklare hva tallene <code>3</code> og <code>5</code> betyr. Dette vil\nogså gjøre det enklere for oss å endre størrelsen på veggen senere.</p>\n<pre><code class=\"language-lua\"><span class=\"hljs-keyword\">local</span> hoyde = <span class=\"hljs-number\">3</span>                               <span class=\"hljs-comment\">-- ny linje</span>\n<span class=\"hljs-keyword\">local</span> lengde = <span class=\"hljs-number\">5</span>                              <span class=\"hljs-comment\">-- ny linje</span>\n\n<span class=\"hljs-keyword\">for</span> j = <span class=\"hljs-number\">1</span>, hoyde <span class=\"hljs-keyword\">do</span>                           <span class=\"hljs-comment\">-- endret linje</span>\n    turtle.up()\n    <span class=\"hljs-keyword\">for</span> i = <span class=\"hljs-number\">1</span>, lengde <span class=\"hljs-keyword\">do</span>                      <span class=\"hljs-comment\">-- endret linje</span>\n        turtle.placeDown()\n        turtle.forward()\n    <span class=\"hljs-keyword\">end</span>\n\n    <span class=\"hljs-keyword\">for</span> i = <span class=\"hljs-number\">1</span>, lengde <span class=\"hljs-keyword\">do</span>                      <span class=\"hljs-comment\">-- endret linje</span>\n        turtle.back()\n    <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p>Legg merke til at vi skriver <code>hoyde</code> med <code>o</code> og ikke med\n<code>ø</code>. Siden ComputerCraft er et engelsk programmeringsspråk kan\nikke variabler ha navn som inneholder de norske bokstavene æ, ø og\nå.</p>\n</li>\n</ul>\n<section class=\"try\" id=\"prov-selv-2\">\n<h3 class=\"try\" id=\"prov-selv-2\">Prøv selv</h3>\n<p>Prøv å endre verdiene av variablene <code>hoyde</code> og <code>lengde</code>. Gjør roboten\nsom du ber den om?</p>\n</section>\n</section>\n</section>\n<section class=\"activity\" id=\"steg-4-funksjoner\">\n<h1 class=\"activity\" id=\"steg-4-funksjoner\">Steg 4: Funksjoner</h1>\n<p>Vi har nå lært roboten hvordan den lager en vegg. For at vi enkelt\nskal kunne bruke dette senere vil vi definere som en funksjon. I\npraksis betyr det at vi lærer roboten en ny kommando, som vi senere\nkan bruke på samme måte som de innebygde kommandoene (som for eksempel\n<code>turtle.forward()</code>).</p>\n<section class=\"check\" id=\"sjekkliste-5\">\n<h2 class=\"check\" id=\"sjekkliste-5\">Sjekkliste</h2>\n<ul>\n<li>\n<p>Vi definerer en funksjon ved hjelp av den innebygde kommandoen\n<code>function</code>.</p>\n<pre><code class=\"language-lua\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">byggVegg</span><span class=\"hljs-params\">()</span></span>                           <span class=\"hljs-comment\">-- ny linje</span>\n    <span class=\"hljs-keyword\">local</span> hoyde = <span class=\"hljs-number\">3</span>\n    <span class=\"hljs-keyword\">local</span> lengde = <span class=\"hljs-number\">5</span>\n\n    <span class=\"hljs-keyword\">for</span> j = <span class=\"hljs-number\">1</span>, hoyde <span class=\"hljs-keyword\">do</span>\n        turtle.up()\n        <span class=\"hljs-keyword\">for</span> i = <span class=\"hljs-number\">1</span>, lengde <span class=\"hljs-keyword\">do</span>\n            turtle.placeDown()\n            turtle.forward()\n        <span class=\"hljs-keyword\">end</span>\n\n        <span class=\"hljs-keyword\">for</span> i = <span class=\"hljs-number\">1</span>, lengde <span class=\"hljs-keyword\">do</span>\n            turtle.back()\n        <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>                                           <span class=\"hljs-comment\">-- ny linje</span>\n</code></pre>\n</li>\n<li>\n<p>Om du kjører programmet slik det er nå vil du se at roboten ikke\ngjør noenting. Det er fordi vi bare har <em>definert</em> funksjonen, det\nvil si vi har fortalt roboten hvordan den kan bygge en vegg. Vi har\nikke sagt til roboten at den faktisk skal bygge veggen. Legg til den\nfølgende linjen helt nederst i programmet ditt.</p>\n<pre><code class=\"language-lua\">byggVegg()\n</code></pre>\n<p>Nå sier vi at roboten også skal bygge veggen.</p>\n</li>\n<li>\n<p>En veldig nyttig ting med funksjoner er at vi kan la variablene være\nnoe som heter parametre. I praksis betyr det at vi bestemmer verdien\npå variablene utenfor selve funksjonen. Endre programmet ditt slik\nat det ser ut som dette, pass på at du sletter de to linjene som\npleide å gi verdi til <code>hoyde</code> og <code>lengde</code>.</p>\n<pre><code class=\"language-lua\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">byggVegg</span><span class=\"hljs-params\">(hoyde, lengde)</span></span>              <span class=\"hljs-comment\">-- endret linje</span>\n    <span class=\"hljs-keyword\">for</span> j = <span class=\"hljs-number\">1</span>, hoyde <span class=\"hljs-keyword\">do</span>\n        turtle.up()\n        <span class=\"hljs-keyword\">for</span> i = <span class=\"hljs-number\">1</span>, lengde <span class=\"hljs-keyword\">do</span>\n            turtle.placeDown()\n            turtle.forward()\n        <span class=\"hljs-keyword\">end</span>\n\n        <span class=\"hljs-keyword\">for</span> i = <span class=\"hljs-number\">1</span>, lengde <span class=\"hljs-keyword\">do</span>\n            turtle.back()\n        <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\nbyggVegg(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>)                                <span class=\"hljs-comment\">-- endret linje</span>\n</code></pre>\n</li>\n</ul>\n<section class=\"try\" id=\"prov-selv-3\">\n<h3 class=\"try\" id=\"prov-selv-3\">Prøv selv</h3>\n<p>Endre tallene <code>3</code> og <code>5</code> i den siste linjen. Bygger roboten vegger av\nforskjellig størrelse?</p>\n</section>\n</section>\n</section>\n<section class=\"activity\" id=\"steg-5-bygg-et-hus\">\n<h1 class=\"activity\" id=\"steg-5-bygg-et-hus\">Steg 5: Bygg et hus</h1>\n<figure>Nå som vi vet hvordan vi bygger en vegg er vi ikke veldig langt unna å\nbygge et enkelt hus. La oss prøve å sette sammen fire vegger!</figure>\n<section class=\"check\" id=\"sjekkliste-6\">\n<h2 class=\"check\" id=\"sjekkliste-6\">Sjekkliste</h2>\n<ul>\n<li>\n<p>Vi begynner enkelt. La oss prøve å bygge en vegg, snu roboten, bygge\nen ny vegg og så videre. Bytt ut den siste linjen <code>byggVegg(3, 5)</code> i\nprogrammet ditt med den følgende løkken:</p>\n<pre><code class=\"language-lua\"><span class=\"hljs-keyword\">for</span> i = <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span> <span class=\"hljs-keyword\">do</span>\n    byggVegg(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>)\n    turtle.turnLeft()\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p>Hva skjer når du kjører programmet ditt?</p>\n<figure><img src=\"" + __webpack_require__(/*! ./firevegger.png */ 459) + "\" alt=\"\" /></figure>\n</li>\n<li>\n<p>Hmm ... det ble jo litt stilig, men et hus er det definitivt\nikke. Problemet er at vi ikke har tenkt gjennom hvor roboten er\netter at den er ferdig med å bygge en vegg.</p>\n<p>Vi burde legge til litt kode i <code>byggVegg()</code> slik at roboten er\nklar til å bygge neste vegg. Dette kan vi gjøre ved å gå nedover i\nstedet for bakover etter at vi har bygd ferdig veggen. Endre\nfunksjonen <code>byggVegg</code> slik at den ser slik ut:</p>\n<pre><code class=\"language-lua\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">byggVegg</span><span class=\"hljs-params\">(hoyde, lengde)</span></span>\n    <span class=\"hljs-keyword\">for</span> j = <span class=\"hljs-number\">1</span>, hoyde <span class=\"hljs-keyword\">do</span>\n        turtle.up()\n        <span class=\"hljs-keyword\">for</span> i = <span class=\"hljs-number\">1</span>, lengde <span class=\"hljs-keyword\">do</span>\n            turtle.placeDown()\n            turtle.forward()\n        <span class=\"hljs-keyword\">end</span>\n\n        <span class=\"hljs-keyword\">if</span> j &lt; hoyde <span class=\"hljs-keyword\">then</span>                     <span class=\"hljs-comment\">-- ny linje</span>\n            <span class=\"hljs-keyword\">for</span> i = <span class=\"hljs-number\">1</span>, lengde <span class=\"hljs-keyword\">do</span>\n                turtle.back()\n            <span class=\"hljs-keyword\">end</span>\n        <span class=\"hljs-keyword\">end</span>                                   <span class=\"hljs-comment\">-- ny linje</span>\n    <span class=\"hljs-keyword\">end</span>\n\n    <span class=\"hljs-keyword\">for</span> j = <span class=\"hljs-number\">1</span>, hoyde <span class=\"hljs-keyword\">do</span>                       <span class=\"hljs-comment\">-- ny linje</span>\n        turtle.down()                         <span class=\"hljs-comment\">-- ny linje</span>\n    <span class=\"hljs-keyword\">end</span>                                       <span class=\"hljs-comment\">-- ny linje</span>\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n</li>\n<li>\n<p>Programmet vårt klarer nesten å bygge et hus av fire vegger. Men\nigjen får vi et lite problem med at roboten krasjer inn i ting den\nhar bygd tidligere. Vi må rett og slett være litt mer forsiktige med\nat roboten ikke går mer enn den trenger.</p>\n<pre><code class=\"language-lua\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">byggVegg</span><span class=\"hljs-params\">(hoyde, lengde)</span></span>\n    <span class=\"hljs-keyword\">for</span> j = <span class=\"hljs-number\">1</span>, hoyde <span class=\"hljs-keyword\">do</span>\n        turtle.up()\n        <span class=\"hljs-keyword\">for</span> i = <span class=\"hljs-number\">1</span>, lengde <span class=\"hljs-keyword\">do</span>\n            turtle.placeDown()\n            <span class=\"hljs-keyword\">if</span> i &lt; lengde <span class=\"hljs-keyword\">then</span>                <span class=\"hljs-comment\">-- ny linje</span>\n                turtle.forward()\n            <span class=\"hljs-keyword\">end</span>                               <span class=\"hljs-comment\">-- ny linje</span>\n        <span class=\"hljs-keyword\">end</span>\n\n        <span class=\"hljs-keyword\">if</span> j &lt; hoyde <span class=\"hljs-keyword\">then</span>\n            <span class=\"hljs-keyword\">for</span> i = <span class=\"hljs-number\">1</span>, lengde - <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">do</span>          <span class=\"hljs-comment\">-- endret linje</span>\n                turtle.back()\n            <span class=\"hljs-keyword\">end</span>\n        <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">end</span>\n\n    turtle.forward()                          <span class=\"hljs-comment\">-- ny linje</span>\n    <span class=\"hljs-keyword\">for</span> j = <span class=\"hljs-number\">1</span>, hoyde <span class=\"hljs-keyword\">do</span>\n        turtle.down()\n    <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n</li>\n</ul>\n<p>Nå har huset vårt fått fire vegger. Vi skal snart se på hvordan vi kan\nbygge taket, men først skal vi se på hvordan vi kan passe på at\nroboten har materiale å bygge med.</p>\n</section>\n</section>\n<section class=\"activity\" id=\"steg-6-mer-byggemateriale\">\n<h1 class=\"activity\" id=\"steg-6-mer-byggemateriale\">Steg 6: Mer byggemateriale</h1>\n<p>Et problem du helt sikkert har oppdaget nå, er at roboten stadig går\ntom for byggemateriale. Selv om roboten har 16 slots for materiale,\nvil den bare bruke en av dem. Ved hjelp av funksjonene\n<code>getItemCount()</code>, <code>getSelectedSlot()</code> og <code>select()</code> i\n<code>turtle</code>-biblioteket kan vi gjøre noe med dette.</p>\n<section class=\"check\" id=\"sjekkliste-7\">\n<h2 class=\"check\" id=\"sjekkliste-7\">Sjekkliste</h2>\n<ul>\n<li>\n<p>Vi vil nå lage en ny funksjon som sjekker at det er materiale\ntilgjengelig før den plasserer det ut. Nedenfor har vi byttet ut\n<code>turtle.placeDown()</code> med et kall på vår egen funksjon <code>plasser()</code>:</p>\n<pre><code class=\"language-lua\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">byggVegg</span><span class=\"hljs-params\">(hoyde, lengde)</span></span>\n    <span class=\"hljs-keyword\">for</span> j = <span class=\"hljs-number\">1</span>, hoyde <span class=\"hljs-keyword\">do</span>\n        turtle.up()\n        <span class=\"hljs-keyword\">for</span> i = <span class=\"hljs-number\">1</span>, lengde <span class=\"hljs-keyword\">do</span>\n            plasser()                         <span class=\"hljs-comment\">-- endret linje</span>\n            <span class=\"hljs-keyword\">if</span> i &lt; lengde <span class=\"hljs-keyword\">then</span>\n                turtle.forward()\n            <span class=\"hljs-keyword\">end</span>\n        <span class=\"hljs-keyword\">end</span>\n\n        <span class=\"hljs-keyword\">if</span> j &lt; hoyde <span class=\"hljs-keyword\">then</span>\n            <span class=\"hljs-keyword\">for</span> i = <span class=\"hljs-number\">1</span>, lengde - <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">do</span>\n                turtle.back()\n            <span class=\"hljs-keyword\">end</span>\n        <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">end</span>\n\n    turtle.forward()\n    <span class=\"hljs-keyword\">for</span> j = <span class=\"hljs-number\">1</span>, hoyde <span class=\"hljs-keyword\">do</span>\n        turtle.down()\n    <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">plasser</span><span class=\"hljs-params\">()</span></span>                            <span class=\"hljs-comment\">-- ny linje</span>\n    <span class=\"hljs-keyword\">while</span> turtle.getItemCount() == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">do</span>       <span class=\"hljs-comment\">-- ny linje</span>\n        slot = turtle.getSelectedSlot()       <span class=\"hljs-comment\">-- ny linje</span>\n        <span class=\"hljs-keyword\">if</span> slot &lt; <span class=\"hljs-number\">16</span> <span class=\"hljs-keyword\">then</span>                     <span class=\"hljs-comment\">-- ny linje</span>\n            turtle.<span class=\"hljs-built_in\">select</span>(slot + <span class=\"hljs-number\">1</span>)           <span class=\"hljs-comment\">-- ny linje</span>\n        <span class=\"hljs-keyword\">else</span>                                  <span class=\"hljs-comment\">-- ny linje</span>\n            turtle.<span class=\"hljs-built_in\">select</span>(<span class=\"hljs-number\">1</span>)                  <span class=\"hljs-comment\">-- ny linje</span>\n        <span class=\"hljs-keyword\">end</span>                                   <span class=\"hljs-comment\">-- ny linje</span>\n    <span class=\"hljs-keyword\">end</span>                                       <span class=\"hljs-comment\">-- ny linje</span>\n\n    turtle.placeDown()                        <span class=\"hljs-comment\">-- ny linje</span>\n<span class=\"hljs-keyword\">end</span>                                           <span class=\"hljs-comment\">-- ny linje</span>\n\n<span class=\"hljs-keyword\">for</span> i = <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span> <span class=\"hljs-keyword\">do</span>\n    byggVegg(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>)\n    turtle.turnLeft()\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p>Les nøye gjennom den nye funksjonen <code>plasser()</code>. Skjønner du hva\nden gjør?</p>\n<p>Det siste funksjonen gjør er å plassere ut en kloss med\n<code>turtle.placeDown()</code>. Men før den plasserer ut klossen bruker vi\n<code>turtle.getItemCount()</code> til å sjekke om det finnes tilgjengelig\nbyggemateriale. Hvis det er 0 klosser i sloten roboten bruker, går\nvi inn i <code>while</code>-løkken hvor vi velger en annen slot. Vi sjekker\nførst hvilken slot roboten bruker med <code>turtle.getSelectedSlot()</code>.\nHvis dette ikke er den siste sloten (slot 16), bruker vi\n<code>turtle.select()</code> til å velge den neste sloten. Hvis vi allerede\ner på den siste sloten velger vi heller den første.</p>\n</li>\n<li>\n<p>Kjør programmet. Hva skjer når roboten går helt tom for\nbyggemateriale? Den blir da bare stående å vente på at du skal fylle\nden opp med nytt materiale.</p>\n<figure><img src=\"" + __webpack_require__(/*! ./flerefarger.png */ 460) + "\" alt=\"\" /></figure>\n</li>\n</ul>\n<section class=\"try\" id=\"prov-selv-4\">\n<h3 class=\"try\" id=\"prov-selv-4\">Prøv selv</h3>\n<p>Nå som roboten bruker flere slotter kan du eksperimentere med å legge\nforskjellig materiale i de forskjellige slottene. På den måten kan du\nfor eksempel få roboten til å bygge et fargerikt hus!</p>\n</section>\n</section>\n</section>\n<section class=\"activity\" id=\"steg-7-vi-trenger-et-tak\">\n<h1 class=\"activity\" id=\"steg-7-vi-trenger-et-tak\">Steg 7: Vi trenger et tak!</h1>\n<p>Nå er det på tide å lære roboten hvordan den bygger tak på huset vårt!</p>\n<section class=\"check\" id=\"sjekkliste-8\">\n<h2 class=\"check\" id=\"sjekkliste-8\">Sjekkliste</h2>\n<ul>\n<li>\n<p>Før vi begynner å bygge taket vil vi flytte koden som bygger huset\ntil en egen funksjon, på samme måte som vi gjorde med <code>byggVegg()</code>\ntidligere. Bytt den nederste løkken i koden din (den som faktisk\nbygger veggene dine) med den følgende koden:</p>\n<pre><code class=\"language-lua\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">byggHus</span><span class=\"hljs-params\">(hoyde, bredde, dybde)</span></span>\n    byggVegg(hoyde, bredde - <span class=\"hljs-number\">1</span>)\n    turtle.turnLeft()\n    byggVegg(hoyde, dybde - <span class=\"hljs-number\">1</span>)\n    turtle.turnLeft()\n    byggVegg(hoyde, bredde - <span class=\"hljs-number\">1</span>)\n    turtle.turnLeft()\n    byggVegg(hoyde, dybde - <span class=\"hljs-number\">1</span>)\n    turtle.turnLeft()\n<span class=\"hljs-keyword\">end</span>\n\nbyggHus(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>)\n</code></pre>\n<p>Ser du hvorfor vi bruker <code>bredde - 1</code> i stedet for <code>bredde</code>? Sjekk\nat huset ditt får riktig størrelse med denne koden!</p>\n</li>\n<li>\n<p>Nå kan vi lage en ny funksjon <code>byggTak()</code>. Legg først til denne\nlinjen nederst i <code>byggHus()</code>-funksjonen din:</p>\n<pre><code class=\"language-lua\">byggTak(bredde, dybde)\n</code></pre>\n</li>\n<li>\n<p>Selve funksjonen for å bygge taket kan være ganske lik funksjonen\nfor å bygge en vegg. Forskjellen er at der veggen står oppover, vil\ntaket ligge flatt. Legg til funksjonen <code>byggTak</code> i koden din:</p>\n<pre><code class=\"language-lua\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">byggTak</span><span class=\"hljs-params\">(bredde, dybde)</span></span>\n    turtle.up()\n    <span class=\"hljs-keyword\">for</span> j = <span class=\"hljs-number\">1</span>, dybde <span class=\"hljs-keyword\">do</span>\n        <span class=\"hljs-keyword\">for</span> i = <span class=\"hljs-number\">1</span>, bredde <span class=\"hljs-keyword\">do</span>\n            plasser()\n            turtle.forward()\n        <span class=\"hljs-keyword\">end</span>\n\n        <span class=\"hljs-keyword\">for</span> i = <span class=\"hljs-number\">1</span>, bredde <span class=\"hljs-keyword\">do</span>\n            turtle.back()\n        <span class=\"hljs-keyword\">end</span>\n        turtle.turnLeft()\n        turtle.forward()\n        turtle.turnRight()\n    <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n</li>\n</ul>\n</section>\n</section>\n<section class=\"activity\" id=\"steg-8-dorer-og-vinduer\">\n<h1 class=\"activity\" id=\"steg-8-dorer-og-vinduer\">Steg 8: Dører og vinduer</h1>\n<figure>Da er vi nesten ferdig med programmet vårt. Det som mangler på at\ndette ligner et skikkelig hus er dører og vinduer.</figure>\n<section class=\"check\" id=\"sjekkliste-9\">\n<h2 class=\"check\" id=\"sjekkliste-9\">Sjekkliste</h2>\n<ul>\n<li>\n<p>Vi velger en relativt enkel løsning denne gangen, og lar roboten\nrett og slett lage hull der dørene og vinduene skal være. Siden vi\nikke vil ha dører på alle veggene, og vil ha litt mulighet til å\nvelge hvor vinduene skal være, lager vi to nye parametre til\n<code>byggVegg()</code>-funksjonen vår. Endre denne funksjonen som følger:</p>\n<pre><code class=\"language-lua\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">byggVegg</span><span class=\"hljs-params\">(hoyde, lengde, dor, vindu)</span></span>    <span class=\"hljs-comment\">-- endret linje</span>\n    <span class=\"hljs-keyword\">for</span> j = <span class=\"hljs-number\">1</span>, hoyde <span class=\"hljs-keyword\">do</span>\n        turtle.up()\n        <span class=\"hljs-keyword\">for</span> i = <span class=\"hljs-number\">1</span>, lengde <span class=\"hljs-keyword\">do</span>\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> (j &lt;= <span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">and</span> i == dor <span class=\"hljs-keyword\">or</span>      <span class=\"hljs-comment\">-- ny linje</span>\n                    j == <span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">and</span> i == vindu) <span class=\"hljs-keyword\">then</span> <span class=\"hljs-comment\">-- ny linje</span>\n                plasser()\n            <span class=\"hljs-keyword\">end</span>                                 <span class=\"hljs-comment\">-- ny linje</span>\n            <span class=\"hljs-keyword\">if</span> i &lt; lengde <span class=\"hljs-keyword\">then</span>\n                turtle.forward()\n            <span class=\"hljs-keyword\">end</span>\n        <span class=\"hljs-keyword\">end</span>\n\n        <span class=\"hljs-keyword\">if</span> j &lt; hoyde <span class=\"hljs-keyword\">then</span>\n            <span class=\"hljs-keyword\">for</span> i = <span class=\"hljs-number\">1</span>, lengde - <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">do</span>\n                turtle.back()\n            <span class=\"hljs-keyword\">end</span>\n        <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">end</span>\n\n    turtle.forward()\n        <span class=\"hljs-keyword\">for</span> j = <span class=\"hljs-number\">1</span>, hoyde <span class=\"hljs-keyword\">do</span>\n            turtle.down()\n    <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p>Med den nye <code>if</code>-testen lager vi en dør ved å ikke bygge de to\nnederste klossene, mens vinduene lages i høyde 2.</p>\n</li>\n<li>\n<p>Vi må til slutt også endre koden i <code>byggHus()</code> som kaller\n<code>byggVegg()</code>:</p>\n<pre><code class=\"language-lua\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">byggHus</span><span class=\"hljs-params\">(hoyde, bredde, dybde)</span></span>\n    byggVegg(hoyde, bredde - <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-keyword\">nil</span>)\n    turtle.turnLeft()\n    byggVegg(hoyde, dybde - <span class=\"hljs-number\">1</span>, <span class=\"hljs-keyword\">nil</span>, <span class=\"hljs-built_in\">math</span>.floor(dybde / <span class=\"hljs-number\">2</span>))\n    turtle.turnLeft()\n    byggVegg(hoyde, bredde - <span class=\"hljs-number\">1</span>, <span class=\"hljs-keyword\">nil</span>, bredde - <span class=\"hljs-number\">2</span>)\n    turtle.turnLeft()\n    byggVegg(hoyde, dybde - <span class=\"hljs-number\">1</span>, <span class=\"hljs-keyword\">nil</span>, <span class=\"hljs-number\">2</span>)\n    turtle.turnLeft()\n\n    byggTak(bredde, dybde)\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p>Legg merke til at vi bruker det spesielle ordet <code>nil</code> hvis vi ikke\nskal lage en dør eller et vindu på en gitt vegg. Skjønner du hvor\nvinduene på de forskjellige veggene plasseres?</p>\n</li>\n</ul>\n</section>\n</section>\n<section class=\"activity\" id=\"steg-9-forskjellige-hus\">\n<h1 class=\"activity\" id=\"steg-9-forskjellige-hus\">Steg 9: Forskjellige hus</h1>\n<p>Vi har nå laget et program som gjør at roboten vår er en\nhusbyggerobot! Vi skal bare gjøre en ørliten forbedring før vi sier\noss helt ferdige!</p>\n<p>Nå har vi kodet hvor stort huset skal være inn i den siste linjen i\nprogrammet vårt, <code>byggHus(3, 5, 4)</code>. Det betyr at om vi vil bygge et\nstørre eller mindre hus, må vi forandre på programmet. Dette er\ntungvint. Det vil være bedre om vi kan fortelle hvor stort huset skal\nvære når vi starter programmet.</p>\n<section class=\"check\" id=\"sjekkliste-10\">\n<h2 class=\"check\" id=\"sjekkliste-10\">Sjekkliste</h2>\n<ul>\n<li>\n<figure>Bytt ut linjen <code>byggHus(3, 5, 4)</code> med det følgende:</figure>\n<pre><code class=\"language-lua\"><span class=\"hljs-keyword\">local</span> tArgs = { ... }\n<span class=\"hljs-keyword\">if</span> #tArgs ~= <span class=\"hljs-number\">3</span> <span class=\"hljs-keyword\">then</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'Skriv: bygghus &lt;høyde&gt; &lt;bredde&gt; &lt;dybde&gt;'</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'F.eks. bygghus 3 5 4'</span>)\n    <span class=\"hljs-keyword\">return</span>\n<span class=\"hljs-keyword\">end</span>\n\nbyggHus(<span class=\"hljs-built_in\">tonumber</span>(tArgs[<span class=\"hljs-number\">1</span>]), <span class=\"hljs-built_in\">tonumber</span>(tArgs[<span class=\"hljs-number\">2</span>]),\n        <span class=\"hljs-built_in\">tonumber</span>(tArgs[<span class=\"hljs-number\">3</span>]))\n</code></pre>\n<figure>Dette kan virke litt mystisk, og vi skal ikke forklare alt som\nskjer her nå. Vi vil komme tilbake til dette i senere leksjoner.</figure>\n</li>\n<li>\n<p>Om du prøver å kjøre programmet ditt ved å bare skrive <code>bygghus</code> nå\nvil du få en melding om at du også må oppgi høyde, bredde og dybde.\nPrøv for eksempel å skrive <code>bygghus 3 5 4</code> for å starte\nhusbyggeroboten.</p>\n</li>\n</ul>\n</section>\n</section>\n";

/***/ },

/***/ 458:
/*!*****************************************************************!*\
  !*** ../oppgaver/src/computercraft/bygg_et_hus/bygg_et_hus.png ***!
  \*****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "_/oppgaver/src/computercraft/bygg_et_hus/bygg_et_hus.749241.png";

/***/ },

/***/ 459:
/*!****************************************************************!*\
  !*** ../oppgaver/src/computercraft/bygg_et_hus/firevegger.png ***!
  \****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "_/oppgaver/src/computercraft/bygg_et_hus/firevegger.1595fc.png";

/***/ },

/***/ 460:
/*!*****************************************************************!*\
  !*** ../oppgaver/src/computercraft/bygg_et_hus/flerefarger.png ***!
  \*****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "_/oppgaver/src/computercraft/bygg_et_hus/flerefarger.366ab5.png";

/***/ }

});
//# sourceMappingURL=bygg_et_hus.fe62c346f64e3e67fe71.js.map