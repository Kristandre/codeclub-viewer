webpackJsonp([51,236],{

/***/ 516:
/*!*****************************************************************************************************************************************************************************************************!*\
  !*** ./~/combine-loader/lib?{"frontmatter":["json","front-matter?onlyAttributes"],"content":["html","markdown-it","front-matter?onlyBody"]}!../oppgaver/src/computercraft/sprettball/sprettball.md ***!
  \*****************************************************************************************************************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = {"frontmatter": __webpack_require__(/*! -!json!front-matter?onlyAttributes!../oppgaver/src/computercraft/sprettball/sprettball.md */ 517),"content": __webpack_require__(/*! -!html!markdown-it!front-matter?onlyBody!../oppgaver/src/computercraft/sprettball/sprettball.md */ 518)}

/***/ },

/***/ 518:
/*!**************************************************************************************************************************************!*\
  !*** ./~/html-loader!./~/markdown-it-loader!./~/front-matter-loader?onlyBody!../oppgaver/src/computercraft/sprettball/sprettball.md ***!
  \**************************************************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = "<section class=\"intro\" id=\"introduksjon\">\n<h1 class=\"intro\" id=\"introduksjon\">Introduksjon</h1>\n<p>Nå skal vi lære hvordan vi kan koble en skjerm til datamaskinen. Med\nen ekstra skjerm kan vi bruke datamaskinen til å kommunisere med\nverden rundt oss. Kanskje Minecraft-verden blir fyllt med store\nreklamebannere?</p>\n<figure><img src=\"" + __webpack_require__(/*! ./sprettball.png */ 519) + "\" alt=\"\" /></figure>\n</section>\n<section class=\"activity\" id=\"steg-1-koble-en-skjerm-til-datamaskinen\">\n<h1 class=\"activity\" id=\"steg-1-koble-en-skjerm-til-datamaskinen\">Steg 1: Koble en skjerm til datamaskinen</h1>\n<figure>La oss som vanlig begynne helt enkelt. La oss koble en skjerm til en\ndatamaskin og se om vi får til å skrive noe på skjermen.</figure>\n<section class=\"check\" id=\"sjekkliste\">\n<h2 class=\"check\" id=\"sjekkliste\">Sjekkliste</h2>\n<ul>\n<li>\n<p>Bygg en <strong>Computer</strong>. Du kan også bruke en <strong>Advanced Computer</strong> om\ndu foretrekker det.</p>\n</li>\n<li>\n<p>Bygg så en <strong>Monitor</strong> inntil datamaskinen du nettopp bygget,\nomtrent som på bildet.</p>\n<figure><img src=\"" + __webpack_require__(/*! ./enkelskjerm.png */ 520) + "\" alt=\"\" /></figure>\n</li>\n<li>\n<p>Start datamaskinen. Den enkleste måten å skrive noe til skjermen er\nved hjelp av programmet <code>monitor</code>. Om du skriver <code>help monitor</code> vil\ndu kunne lese at <code>monitor</code> kan kjøre andre programmer på en\ntilkoblet skjerm.</p>\n<p>La oss for eksempel prøve programmet <code>hello</code>. Dette er et enkelt\nprogram som vi såvidt har sett litt på tidligere. Det skriver bare\nteksten <em>Hello World!</em>. Kjør først programmet på datamaskinen:</p>\n<pre><code><span class=\"hljs-blockquote\">&gt; hello</span>\nHello World!\n</code></pre>\n<p>Nå kan vi prøve å få dette til å kjøre på skjermen. Med skjermen\nkoblet til på høyre (<em>right</em>) side av datamaskinen (som på bildet\nover) skriver vi bare</p>\n<pre><code>&gt;<span class=\"hljs-instruction\"> monitor </span>right hello\n</code></pre>\n<p>Du kan nå trykke <code>Esc</code> for å gå ut av datamaskinen og se på\nskjermen. Står det <em>Hello World!</em>?</p>\n<figure><img src=\"" + __webpack_require__(/*! ./helloworld_liten.png */ 521) + "\" alt=\"\" /></figure>\n</li>\n<li>\n<p>Kult! Da er vi igang med skjermene! Men - det ble jo veldig dårlig\nplass på den skjermen! Det er det heldigvis lett å gjøre noe med. Om\ndu setter en <strong>Monitor</strong> ved siden av den du allerede har vil de to\nskjermene smelte sammen til en større skjerm. På denne måten kan du\nlage en stor skjerm! Prøv å kjør <code>hello</code>-programmet på den store\nskjermen.</p>\n<figure><img src=\"" + __webpack_require__(/*! ./helloworld_stor.png */ 522) + "\" alt=\"\" /></figure>\n</li>\n<li>\n<p>Trikset med <code>monitor</code> fungerer selvsagt også med programmer vi\nskriver selv. La oss lage et enkelt program som vi kaller <code>ku</code>:</p>\n<pre><code class=\"language-lua\"><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"^__^\"</span>)\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"(oo)_______\"</span>)\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"(__)       )\"</span>)\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"   ||----W |\"</span>)\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"   ||     ||\"</span>)\n</code></pre>\n<p>Det er ikke så farlig om din ku ikke ser ut akkurat som her. Du\nkan også gjerne tegne noe helt annet. Vi vil bare teste at også\nvårt eget program kan skrives på skjemen.</p>\n</li>\n<li>\n<figure>Nå kan vi kjøre programmet: <code>monitor right ku</code>.</figure>\n<figure><img src=\"" + __webpack_require__(/*! ./ku.png */ 523) + "\" alt=\"\" /></figure>\n</li>\n</ul>\n</section>\n<section class=\"protip\" id=\"cowsay\">\n<h2 class=\"protip\" id=\"cowsay\">Cowsay</h2>\n<p>Denne kuen er basert på et morsomt lite program som heter <strong>Cowsay</strong>,\nog som ble laget av Tony Monroe på slutten av 1990-tallet. En\nweb-variant av programmet finnes nå på\n<a href=\"http://cowsay.morecode.org/\">http://cowsay.morecode.org/</a>.</p>\n</section>\n</section>\n<section class=\"activity\" id=\"steg-2-en-annen-metode\">\n<h1 class=\"activity\" id=\"steg-2-en-annen-metode\">Steg 2: En annen metode</h1>\n<p>I stedet for at vi bruker <code>monitor</code>-programmet for å skrive til\nskjermen kan vi skrive direkte til skjermen i programmer vi selv\nlager. Dette er ganske enkelt med et bibliotek som heter <code>peripheral</code>\n(<em>peripheral</em> betyr i denne sammenhengen <em>tillegg</em>, altså skjermen er\net tillegg til datamaskinen).</p>\n<section class=\"check\" id=\"sjekkliste-2\">\n<h2 class=\"check\" id=\"sjekkliste-2\">Sjekkliste</h2>\n<ul>\n<li>\n<figure>Lag et enkelt program som heter <code>skjerm</code> og ser slik ut:</figure>\n<pre><code class=\"language-lua\">skjerm = peripheral.wrap(<span class=\"hljs-string\">\"right\"</span>)\nskjerm.write(<span class=\"hljs-string\">\"Heisann!\"</span>)\n</code></pre>\n<p>Som vanlig kan du bytte ut <em>right</em> med for eksempel <em>left</em> eller\n<em>top</em> om du har plassert skjermen annerledes.</p>\n</li>\n<li>\n<p>Kjør programmet ditt ved å skrive <code>skjerm</code>. Selv uten <code>monitor</code> skal\nprogrammet skrive til skjermen ved siden av datamaskinen.</p>\n</li>\n<li>\n<p>I stedet for <code>peripheral.wrap</code> kan vi bruke <code>peripheral.find</code>. Da\ntrenger vi ikke å spesifisere hvilken side av datamaskinen skjermen\ner på. Endre programmet ditt som følger:</p>\n<pre><code class=\"language-lua\"><span class=\"hljs-keyword\">local</span> skjerm = peripheral.find(<span class=\"hljs-string\">\"monitor\"</span>)     <span class=\"hljs-comment\">-- endret linje</span>\nskjerm.write(<span class=\"hljs-string\">\"Heisann!\"</span>)\n</code></pre>\n</li>\n<li>\n<p>Vi kan også sjekke om det er noen skjerm koblet til. Dette gjør vi\nenkelt i en <em>if</em>-test:</p>\n<pre><code class=\"language-lua\"><span class=\"hljs-keyword\">local</span> skjerm = peripheral.find(<span class=\"hljs-string\">\"monitor\"</span>)\n\n<span class=\"hljs-keyword\">if</span> skjerm <span class=\"hljs-keyword\">then</span>                                <span class=\"hljs-comment\">-- ny linje</span>\n    skjerm.write(<span class=\"hljs-string\">\"Heisann!\"</span>)\n<span class=\"hljs-keyword\">else</span>                                          <span class=\"hljs-comment\">-- ny linje</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Ingen skjerm er koblet til\"</span>)       <span class=\"hljs-comment\">-- ny linje</span>\n<span class=\"hljs-keyword\">end</span>                                           <span class=\"hljs-comment\">-- ny linje</span>\n</code></pre>\n<p>Prøv å kjør dette nye programmet. Det kan hende du vil gjøre\n<code>monitor right clear</code> innimellom for å tømme skjermen. Prøv også å\nkoble fra (ødelegge) skjermen. Får du melding om at ingen skjerm\ner koblet til når du prøver å kjøre programmet ditt?</p>\n</li>\n</ul>\n</section>\n</section>\n<section class=\"activity\" id=\"steg-3-en-ball-faller-over-skjermen\">\n<h1 class=\"activity\" id=\"steg-3-en-ball-faller-over-skjermen\">Steg 3: En ball faller over skjermen</h1>\n<p>Vi skal nå begynne på en enkel animasjon som vi kan kjøre på skjermen.</p>\n<section class=\"check\" id=\"sjekkliste-3\">\n<h2 class=\"check\" id=\"sjekkliste-3\">Sjekkliste</h2>\n<ul>\n<li>\n<p>Lag et nytt program som heter <code>sprettball</code>. Det begynner ganske likt\nprogrammet vi jobbet med tidligere, så om du vil kan du kopiere det\nved å skrive <code>copy skjerm sprettball</code>. Programmet <code>sprettball</code> skal\nse ut som følger:</p>\n<pre><code class=\"language-lua\"><span class=\"hljs-keyword\">local</span> skjerm = peripheral.find(<span class=\"hljs-string\">\"monitor\"</span>)\n\n<span class=\"hljs-keyword\">if</span> skjerm <span class=\"hljs-keyword\">then</span>\n    skjerm.clear()\n    skjerm.write(<span class=\"hljs-string\">\"O\"</span>)\n<span class=\"hljs-keyword\">else</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Ingen skjerm er koblet til\"</span>)\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p>Dette skal tegne en ball øverst på skjermen.</p>\n</li>\n<li>\n<p>Vi kan nå bruke en enkel <em>for</em>-løkke til å animere ballen. Endre\nkoden din:</p>\n<pre><code class=\"language-lua\"><span class=\"hljs-keyword\">local</span> skjerm = peripheral.find(<span class=\"hljs-string\">\"monitor\"</span>)\n\n<span class=\"hljs-keyword\">if</span> skjerm <span class=\"hljs-keyword\">then</span>\n    <span class=\"hljs-keyword\">for</span> rad = <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">10</span> <span class=\"hljs-keyword\">do</span>                        <span class=\"hljs-comment\">-- ny linje</span>\n        skjerm.clear()\n        skjerm.setCursorPos(<span class=\"hljs-number\">3</span>, rad)           <span class=\"hljs-comment\">-- ny linje</span>\n        skjerm.write(<span class=\"hljs-string\">\"O\"</span>)\n        sleep(<span class=\"hljs-number\">1</span>)                              <span class=\"hljs-comment\">-- ny linje</span>\n    <span class=\"hljs-keyword\">end</span>                                       <span class=\"hljs-comment\">-- ny linje</span>\n<span class=\"hljs-keyword\">else</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Ingen skjerm er koblet til\"</span>)\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p>For at vi skal rekke å se at ballen flytter seg har vi lagt inn en\n<code>sleep</code>-kommando som bare venter litt (1-tallet betyr 1 sekund)\nmellom hver gang ballen flyttes.</p>\n</li>\n<li>\n<p>Dette er ikke så spennende enda, men før vi lager noe mer avansert\nvil vi gjøre en liten omstrukturering av koden, som gjør det enklere\nfor oss å holde oversikten senere. Vi flytter alt som har med\nanimering av ballen inn i en egen funksjon <code>tegnBall</code>. Flytt\nkodelinjene rundt slik at de blir som dette:</p>\n<pre><code class=\"language-lua\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">tegnBall</span><span class=\"hljs-params\">(skjerm)</span></span>                     <span class=\"hljs-comment\">-- ny linje</span>\n    <span class=\"hljs-keyword\">for</span> rad = <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">10</span> <span class=\"hljs-keyword\">do</span>                        <span class=\"hljs-comment\">-- flyttet linje</span>\n        skjerm.clear()                        <span class=\"hljs-comment\">-- flyttet linje</span>\n        skjerm.setCursorPos(<span class=\"hljs-number\">3</span>, rad)           <span class=\"hljs-comment\">-- flyttet linje</span>\n        skjerm.write(<span class=\"hljs-string\">\"O\"</span>)                     <span class=\"hljs-comment\">-- flyttet linje</span>\n        sleep(<span class=\"hljs-number\">1</span>)                              <span class=\"hljs-comment\">-- flyttet linje</span>\n    <span class=\"hljs-keyword\">end</span>                                       <span class=\"hljs-comment\">-- flyttet linje</span>\n<span class=\"hljs-keyword\">end</span>                                           <span class=\"hljs-comment\">-- ny linje</span>\n\nskjerm = peripheral.find(<span class=\"hljs-string\">\"monitor\"</span>)\n\n<span class=\"hljs-keyword\">if</span> skjerm <span class=\"hljs-keyword\">then</span>\n    tegnBall(skjerm)                          <span class=\"hljs-comment\">-- ny linje</span>\n<span class=\"hljs-keyword\">else</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Ingen skjerm er koblet til\"</span>)\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n</li>\n</ul>\n</section>\n</section>\n<section class=\"activity\" id=\"steg-4-hvor-stor-er-skjermen\">\n<h1 class=\"activity\" id=\"steg-4-hvor-stor-er-skjermen\">Steg 4: Hvor stor er skjermen</h1>\n<p>En liten utfordring med skjermer er at de kan ha forskjellig\nstørrelse. Hvis du for eksempel setter tre skjermer oppå hverandre\nslik at du får en veldig høy skjerm vil ikke ballen i\n<code>sprettball</code>-programmet ditt falle helt til bunnen av skjermen. Dette\nkan vi løse ved å bruke funksjonen <code>getSize</code>.</p>\n<section class=\"check\" id=\"sjekkliste-4\">\n<h2 class=\"check\" id=\"sjekkliste-4\">Sjekkliste</h2>\n<ul>\n<li>\n<p>Funksjonen <code>getSize</code> forteller oss hvor bred og hvor høy skjermen\ner. Endre funksjonen <code>tegnBall</code> slik at ballen faller over hele\nskjermen:</p>\n<pre><code class=\"language-lua\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">tegnBall</span><span class=\"hljs-params\">(skjerm)</span></span>\n    <span class=\"hljs-keyword\">local</span> bredde, hoyde = skjerm.getSize()    <span class=\"hljs-comment\">-- ny linje</span>\n    <span class=\"hljs-keyword\">for</span> rad = <span class=\"hljs-number\">1</span>, hoyde <span class=\"hljs-keyword\">do</span>                     <span class=\"hljs-comment\">-- endret linje</span>\n        skjerm.clear()\n        skjerm.setCursorPos(<span class=\"hljs-number\">3</span>, rad)\n        skjerm.write(<span class=\"hljs-string\">\"O\"</span>)\n        sleep(<span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n</li>\n<li>\n<figure>Prøv å lag skjermen høyere eller lavere. Faller ballen hele veien\nned når du kjører programmet ditt?</figure>\n</li>\n<li>\n<figure>Klarer du å sentrere ballen, slik at den faller nedover midt på\nskjermen uansett hvor stor skjermen er? Prøv selv!</figure>\n</li>\n</ul>\n</section>\n</section>\n<section class=\"activity\" id=\"steg-5-sprettball\">\n<h1 class=\"activity\" id=\"steg-5-sprettball\">Steg 5: Sprettball</h1>\n<p>Nå vil vi få ballen til å oppføre seg mer som en sprettball. For å få\ntil dette vil vi innføre noen nye variabler. Vi vil la <code>X</code> og <code>Y</code>\nbetegne hvor ballen er, mens <code>fartX</code> og <code>fartY</code> forteller hvor fort\nballen flytter på seg.</p>\n<section class=\"check\" id=\"sjekkliste-5\">\n<h2 class=\"check\" id=\"sjekkliste-5\">Sjekkliste</h2>\n<ul>\n<li>\n<p>I tillegg til de nye variablene bytter vi ut <em>for</em>-løkken med en\n<em>while</em>-løkke. Denne gjør at ballen skal sprette for alltid. Husk at\ndu bruker <code>Ctrl-T</code> for å avslutte programmet.</p>\n<pre><code class=\"language-lua\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">tegnBall</span><span class=\"hljs-params\">(skjerm)</span></span>\n    <span class=\"hljs-keyword\">local</span> bredde, hoyde = skjerm.getSize()\n    <span class=\"hljs-keyword\">local</span> X, Y = <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>                         <span class=\"hljs-comment\">-- ny linje</span>\n    <span class=\"hljs-keyword\">local</span> fartX, fartY = <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>                 <span class=\"hljs-comment\">-- ny linje</span>\n\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">true</span> <span class=\"hljs-keyword\">do</span>                             <span class=\"hljs-comment\">-- endret linje</span>\n        skjerm.clear()\n        skjerm.setCursorPos(X, Y)             <span class=\"hljs-comment\">-- endret linje</span>\n        skjerm.write(<span class=\"hljs-string\">\"O\"</span>)\n        sleep(<span class=\"hljs-number\">1</span>)\n\n        X = X + fartX                         <span class=\"hljs-comment\">-- ny linje</span>\n        Y = Y + fartY                         <span class=\"hljs-comment\">-- ny linje</span>\n    <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p>Ballen vil nå bevege seg på skrå over skjermen. Ser du hvorfor?</p>\n</li>\n<li>\n<p>Vi vil nå la ballen sprette når den treffer kanten. Dette gjør vi\nved å &quot;snu farten&quot; når vi beveger oss ut av skjermen. Legg til et\npar tester nederst i funksjonen din:</p>\n<pre><code class=\"language-lua\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">tegnBall</span><span class=\"hljs-params\">(skjerm)</span></span>\n    <span class=\"hljs-keyword\">local</span> bredde, hoyde = skjerm.getSize()\n    <span class=\"hljs-keyword\">local</span> X, Y = <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>\n    <span class=\"hljs-keyword\">local</span> fartX, fartY = <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">true</span> <span class=\"hljs-keyword\">do</span>\n        skjerm.clear()\n        skjerm.setCursorPos(X, Y)\n        skjerm.write(<span class=\"hljs-string\">\"O\"</span>)\n        sleep(<span class=\"hljs-number\">1</span>)\n\n        X = X + fartX\n        Y = Y + fartY\n\n        <span class=\"hljs-keyword\">if</span> X &lt;= <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">or</span> X &gt;= bredde <span class=\"hljs-keyword\">then</span>         <span class=\"hljs-comment\">-- ny linje</span>\n            fartX = -fartX                    <span class=\"hljs-comment\">-- ny linje</span>\n        <span class=\"hljs-keyword\">end</span>                                   <span class=\"hljs-comment\">-- ny linje</span>\n        <span class=\"hljs-keyword\">if</span> Y &lt;= <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">or</span> Y &gt;= hoyde <span class=\"hljs-keyword\">then</span>          <span class=\"hljs-comment\">-- ny linje</span>\n            fartY = -fartY                    <span class=\"hljs-comment\">-- ny linje</span>\n        <span class=\"hljs-keyword\">end</span>                                   <span class=\"hljs-comment\">-- ny linje</span>\n    <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p>Spretter ballen tilbake når den treffer kanten av skjermen? Lag\ngjerne en ganske stor skjerm. Du kan også endre pausen mellom hver\ngang ballen flytter seg. For eksempel bytt ut <code>sleep(1)</code> med\n<code>sleep(0.1)</code>.</p>\n</li>\n<li>\n<p>Tilslutt kan vi lage en mer naturlig sprettball-bevegelse ved å ta\nmed en variabel for gravitasjon. Vi kan tenke at gravitasjonen gjør\nat ballen faller stadig raskere ned mot bakken, altså den øker\n<code>fartY</code>.</p>\n<pre><code class=\"language-lua\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">tegnBall</span><span class=\"hljs-params\">(skjerm)</span></span>\n    <span class=\"hljs-keyword\">local</span> bredde, hoyde = skjerm.getSize()\n    <span class=\"hljs-keyword\">local</span> X, Y = <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>\n    <span class=\"hljs-keyword\">local</span> fartX, fartY = <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>                 <span class=\"hljs-comment\">-- endret linje</span>\n    <span class=\"hljs-keyword\">local</span> gravitasjon = <span class=\"hljs-number\">0.2</span>                   <span class=\"hljs-comment\">-- ny linje</span>\n\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">true</span> <span class=\"hljs-keyword\">do</span>\n        skjerm.clear()\n        skjerm.setCursorPos(X, Y)\n        skjerm.write(<span class=\"hljs-string\">\"O\"</span>)\n        sleep(<span class=\"hljs-number\">0.1</span>)\n\n        fartY = fartY + gravitasjon           <span class=\"hljs-comment\">-- ny linje</span>\n        X = X + fartX\n        Y = Y + fartY\n\n        <span class=\"hljs-keyword\">if</span> X &lt;= <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">or</span> X &gt;= bredde <span class=\"hljs-keyword\">then</span>\n            fartX = -fartX\n        <span class=\"hljs-keyword\">end</span>\n        <span class=\"hljs-keyword\">if</span> Y &gt;= hoyde <span class=\"hljs-keyword\">then</span>                    <span class=\"hljs-comment\">-- endret linje</span>\n            fartY = -(fartY + gravitasjon)    <span class=\"hljs-comment\">-- endret linje</span>\n        <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p>Vi endret også litt i sjekken om <code>Y</code> er slik at ballen skal\nsprette, siden gravitasjonen gjør at vi ikke trenger å sprette i\ntaket lengre.</p>\n</li>\n</ul>\n</section>\n</section>\n<section class=\"activity\" id=\"steg-6-reklamebanner\">\n<h1 class=\"activity\" id=\"steg-6-reklamebanner\">Steg 6: Reklamebanner</h1>\n<p>Vi tar nå en liten pause fra sprettballen vår for å se på hvordan vi\nkan bruke skjermene til å lage enkle tekstplakater eller\nreklamebannere.</p>\n<section class=\"check\" id=\"sjekkliste-6\">\n<h2 class=\"check\" id=\"sjekkliste-6\">Sjekkliste</h2>\n<ul>\n<li>\n<p>Lag et nytt program som du kaller <code>reklame</code>. Vi begynner helt enkelt\nmed kommandoer du allerede kjenner:</p>\n<pre><code class=\"language-lua\"><span class=\"hljs-keyword\">local</span> skjerm = peripheral.find(<span class=\"hljs-string\">\"monitor\"</span>)\n\n<span class=\"hljs-keyword\">if</span> skjerm <span class=\"hljs-keyword\">then</span>\n    skjerm.clear()\n    skjerm.setCursorPos(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>)\n    skjerm.write(<span class=\"hljs-string\">\"ComputerCraft\"</span>)\n<span class=\"hljs-keyword\">else</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Ingen skjerm er koblet til\"</span>)\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p>Kjør programmet. Skriver det til skjermen som det skal?</p>\n</li>\n<li>\n<p>Et problem hvis dette skal være et reklamebanner er at teksten er\nalt for liten! Du må jo nesten gå helt fram til skjermen for å kunne\nlese den.</p>\n<p>For skjermer kan vi bruke <code>setTextScale</code> for å endre\ntekststørrelsen.  Legg til linjen</p>\n<pre><code class=\"language-lua\">skjerm.setTextScale(<span class=\"hljs-number\">3</span>)\n</code></pre>\n<p>rett før linjen <code>skjerm.clear()</code>, og kjør programmet ditt på nytt.\nBle teksten større?</p>\n<figure><img src=\"" + __webpack_require__(/*! ./reklame.png */ 524) + "\" alt=\"\" /></figure>\n<p>Tallet <code>3</code> i <code>setTextScale(3)</code> indikererer størrelsen på\nteksten. Her kan vi bruke tall mellom 0.5 og 5, hvor 5 gir oss den\nstørste mulige teksten. Etter at vi har brukt <code>setTextScale</code> må vi\nbruke <code>clear</code> før tekststørrelsen blir oppdatert.</p>\n</li>\n<li>\n<p>Prøv å endre verdien i <code>setTextScale</code>. Forandrer størrelsen på\nteksten seg? Hva skjer hvis du bruker et tall større enn 5? Eller\nmindre enn 0.5?</p>\n</li>\n<li>\n<p>Vi vil nå la programmet selv bestemme tekststørrelsen. Siden vi vil\nat dette skal være en reklameplakat ønsker vi at teksten skal være\nså stor som mulig.</p>\n<p>En måte å gjøre dette på er å lage en løkke hvor vi tester alle\ntekststørrelsene fra størst til minst, helt til vi finner en\nstørrelse hvor all teksten får plass på skjermen.</p>\n<figure>Legg inn denne funksjonen øverst i <code>reklame</code>-koden:</figure>\n<pre><code class=\"language-lua\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">brukStorTekst</span><span class=\"hljs-params\">(skjerm, tekst)</span></span>\n    <span class=\"hljs-keyword\">local</span> lengde = #tekst\n\n    <span class=\"hljs-keyword\">for</span> skala = <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0.5</span>, -<span class=\"hljs-number\">0.5</span> <span class=\"hljs-keyword\">do</span>\n        skjerm.setTextScale(skala)\n        skjerm.clear()\n        bredde, hoyde = skjerm.getSize()\n        <span class=\"hljs-keyword\">if</span> lengde &lt;= bredde <span class=\"hljs-keyword\">then</span>\n            <span class=\"hljs-keyword\">break</span>\n        <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<figure>Skjønner du hvordan denne koden fungerer? Vi bruker noen nye triks\nher som du kanskje ikke har sett før.</figure>\n<p>Tegnet <code>#</code> brukes for å telle ting. For eksempel betyr <code>#tekst</code>\nrett og slett bare antall tegn i (lengden av) <code>tekst</code>. Dette må vi\nvite når vi senere skal sjekke om skjermen er stor nok.</p>\n<p>I <em>for</em>-løkken bruker vi tre tall i stedet for to som vanlig. Det\nsiste tallet, i dette tilfellet -0.5 bestemmer hvor store steg vi\ntar i løkken. Siden vi her ville telle ned fra 5 til 0.5 må vi\nbruke et negativt steg.</p>\n<p>Til slutt, <code>break</code> sier at vi vil avslutte <em>for</em>-løkken før den\negentlig er ferdig. Dermed avslutter vi letingen etter\ntekststørrelser når vi finner en som passer. Tidligere har vi\nbrukt <code>break</code> for å for eksempel avslutte <code>skattejakt</code> når man\nfant skatten.</p>\n</li>\n<li>\n<p>Nå vil vi bruke denne funksjonen for å sette tekststørrelsen. Prøv\nselv om du finner ut hvor og hvordan funksjonen bør kalles! Skal\nnoen av de opprinnelige linjene slettes? Sjekk om programmet ditt\nvirker ved å endre størrelsen på skjermen (bygg eller ødelegg noen\nenkeltskjermer) og kjøre det på nytt.</p>\n</li>\n<li>\n<p>En ting du kanskje ser er at du må skrive teksten som skal stå på\nskjermen to ganger? Først for at <code>brukStorTekst</code> trenger den for å\nfinne riktig størrelse på skjermen, og deretter for at\n<code>skjerm.write</code> skal skrive den til skjermen. Da er det lurt å i\nstedet lage en variabel. Med denne variabelen vil koden din (under\nfunksjonen <code>brukStorTekst</code>) se omtrent slik ut:</p>\n<pre><code class=\"language-lua\"><span class=\"hljs-keyword\">local</span> tekst = <span class=\"hljs-string\">\"ComputerCraft\"</span>\n<span class=\"hljs-keyword\">local</span> skjerm = peripheral.find(<span class=\"hljs-string\">\"monitor\"</span>)\n\n<span class=\"hljs-keyword\">if</span> skjerm <span class=\"hljs-keyword\">then</span>\n    brukStorTekst(skjerm, tekst)\n    skjerm.setCursorPos(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>)\n    skjerm.write(tekst)\n<span class=\"hljs-keyword\">else</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Ingen skjerm er koblet til\"</span>)\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n</li>\n</ul>\n<section class=\"try\" id=\"prov-selv\">\n<h3 class=\"try\" id=\"prov-selv\">Prøv selv</h3>\n<p>Det er flere måter å gjøre <code>reklame</code>-programmet enda bedre på. Her er\nto forslag:</p>\n<p>Kan du midtstille teksten på skjermen? Du må da endre tallene i\n<code>setCursorPos</code> ut ifra lengden på teksten og størrelsen på skjermen.</p>\n<p>Om du endrer størrelsen på skjermen blir teksten borte. Vi kan heller\nfå teksten til å bli skrevet i ny og riktig størrelse når skjermen\nblir endret. Du kan bruke <code>os.pullEvent</code> til å lytte på hendelser som\nheter <code>monitor_resize</code> og skrive teksten på nytt når disse skjer.</p>\n</section>\n</section>\n</section>\n<section class=\"activity\" id=\"steg-7-en-skikkelig-ticker\">\n<h1 class=\"activity\" id=\"steg-7-en-skikkelig-ticker\">Steg 7: En skikkelig ticker!</h1>\n<p>Dessverre er det en begrensning på hvor stor en skjerm kan være. Du\nkan maksimalt sette sammen 8 x 6 skjermer til en stor skjerm. Dette\nbegrenser hvor lange tekster vi kan skrive, ihvertfall om vi vil bruke\nstor og godt synlig tekst.</p>\n<figure>Et alternativ for lengre tekster er å bruke en ticker, hvor vi\nanimerer teksten slik at den ruller over skjermen.</figure>\n</section>\n<section class=\"check\" id=\"sjekkliste-7\">\n<h1 class=\"check\" id=\"sjekkliste-7\">Sjekkliste</h1>\n<ul>\n<li>\n<p>Lag et nytt program som heter <code>ticker</code>. Vi begynner programmet på en\nvelkjent måte:</p>\n<pre><code class=\"language-lua\"><span class=\"hljs-keyword\">local</span> tekst = <span class=\"hljs-string\">\"Jeg er en lang tekst. Bytt meg gjerne ut!\"</span>\n<span class=\"hljs-keyword\">local</span> skjerm = peripheral.find(<span class=\"hljs-string\">\"monitor\"</span>)\n\n<span class=\"hljs-keyword\">if</span> skjerm <span class=\"hljs-keyword\">then</span>\n    skjerm.setTextScale(<span class=\"hljs-number\">5</span>)\n    skjerm.clear()\n\n    skjerm.setCursorPos(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>)\n    skjerm.write(tekst)\n<span class=\"hljs-keyword\">else</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Ingen skjerm er koblet til\"</span>)\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p>Her setter vi bare størrelsen på teksten fast til <code>5</code>, siden vi\nvil bruke så stor tekst som mulig. Hva skjer når du kjører dette\nprogrammet?</p>\n</li>\n<li>\n<p>I stedet for å prøve å skrive hele teksten til skjermen vil vi nå\nbare skrive så mye tekst som faktisk får plass. Da bruker vi igjen\n<code>skjerm.getSize()</code> for å finne ut hvor stor skjermen er. Videre vil\nvi bruke funksjonen <code>string.sub</code> i <code>string</code>-biblioteket (<em>sub</em> betyr\ni denne sammenhengen <em>del</em>, den brukes til å finne deltekster).</p>\n<pre><code class=\"language-lua\"><span class=\"hljs-keyword\">local</span> tekst = <span class=\"hljs-string\">\"Jeg er en lang tekst. Bytt meg gjerne ut!\"</span>\n<span class=\"hljs-keyword\">local</span> skjerm = peripheral.find(<span class=\"hljs-string\">\"monitor\"</span>)\n\n<span class=\"hljs-keyword\">if</span> skjerm <span class=\"hljs-keyword\">then</span>\n    skjerm.setTextScale(<span class=\"hljs-number\">5</span>)\n    skjerm.clear()\n    <span class=\"hljs-keyword\">local</span> bredde, hoyde = skjerm.getSize()         <span class=\"hljs-comment\">-- ny linje</span>\n\n    <span class=\"hljs-keyword\">local</span> deltekst = <span class=\"hljs-built_in\">string</span>.sub(tekst, <span class=\"hljs-number\">1</span>, bredde)  <span class=\"hljs-comment\">-- ny linje</span>\n    skjerm.setCursorPos(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>)\n    skjerm.write(deltekst)                         <span class=\"hljs-comment\">-- endret linje</span>\n<span class=\"hljs-keyword\">else</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Ingen skjerm er koblet til\"</span>)\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p>I linjen <code>string.sub(tekst, 1, bredde)</code> sier vi at vi vil ta ut en\ndeltekst fra <code>tekst</code> fra tegn nummer <code>1</code> til tegn nummer\n<code>bredde</code>. Prøv å endre på disse tallene for å se effekten, slik at\ndu skjønner hvordan denne funksjonen virker.</p>\n</li>\n<li>\n<p>Vi kan nå animere teksten ved hjelp av en <em>for</em>-løkke.</p>\n<pre><code class=\"language-lua\"><span class=\"hljs-keyword\">local</span> tekst = <span class=\"hljs-string\">\"Jeg er en lang tekst. Bytt meg gjerne ut!\"</span>\n<span class=\"hljs-keyword\">local</span> skjerm = peripheral.find(<span class=\"hljs-string\">\"monitor\"</span>)\n\n<span class=\"hljs-keyword\">if</span> skjerm <span class=\"hljs-keyword\">then</span>\n    skjerm.setTextScale(<span class=\"hljs-number\">5</span>)\n    skjerm.clear()\n    <span class=\"hljs-keyword\">local</span> bredde, hoyde = skjerm.getSize()\n    <span class=\"hljs-keyword\">local</span> lengde = #tekst                     <span class=\"hljs-comment\">-- ny linje</span>\n\n    <span class=\"hljs-keyword\">for</span> i = <span class=\"hljs-number\">0</span>, lengde - bredde <span class=\"hljs-keyword\">do</span>             <span class=\"hljs-comment\">-- ny linje</span>\n        <span class=\"hljs-keyword\">local</span> deltekst = <span class=\"hljs-built_in\">string</span>.sub(tekst, i+<span class=\"hljs-number\">1</span>, i+bredde)\n                                  <span class=\"hljs-comment\">-- deltekstlinjen er endret</span>\n        skjerm.setCursorPos(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>)\n        skjerm.clear()                        <span class=\"hljs-comment\">-- ny linje</span>\n        skjerm.write(deltekst)\n    <span class=\"hljs-keyword\">end</span>                                       <span class=\"hljs-comment\">-- ny linje</span>\n<span class=\"hljs-keyword\">else</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Ingen skjerm er koblet til\"</span>)\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p>Skjønner du hvordan tellevariabelen <code>i</code> virker? Enkelt sagt teller\nden hvor langt fra det første tegnet i teksten vi har kommet.</p>\n</li>\n<li>\n<p>Kjør programmet. Ser du animasjonen? Hvis du bare ser slutten av\nteksten på skjermen er det fordi datamaskinen animerer for\nraskt. Prøv å legg inn en <code>sleep</code>-kommando nederst i\n<em>for</em>-løkken. Ble det bedre nå?</p>\n</li>\n<li>\n<p>Hvis dette skal være en ticker som står og går vil vi at teksten\nskal rullere hele tiden, ikke bare en gang. Prøv også å lag en\n<code>while true do</code>-løkke rundt <em>for</em>-løkken. Gjentas animasjonen? Husk\nat du kan bruke <code>Ctrl-T</code> for å stoppe programmet ditt.</p>\n</li>\n<li>\n<p>Når animasjonen kommer til slutten av teksten, bare hopper den rett\ntil begynnelsen igjen. Dette ser ikke så bra ut. Vi kan forbedre\ndette ved å legge på litt luft før og etter teksten.</p>\n<p>Hvor mye luft vi legger på vil ideelt sett avhenge av hvor stor\nskjermen er. Til dette kan vi bruke <code>string.rep</code> som kan repetere\ntekststrenger. For eksempel er <code>string.rep(&quot;Hei&quot;, 4)</code> det samme\nsom <code>HeiHeiHeiHei</code>. Vi kan legge på litt luft rundt teksten før vi\nbegynner å animere den.</p>\n<pre><code class=\"language-lua\"><span class=\"hljs-keyword\">local</span> tekst = <span class=\"hljs-string\">\"Jeg er en lang tekst. Bytt meg gjerne ut!\"</span>\n<span class=\"hljs-keyword\">local</span> skjerm = peripheral.find(<span class=\"hljs-string\">\"monitor\"</span>)\n\n<span class=\"hljs-keyword\">if</span> skjerm <span class=\"hljs-keyword\">then</span>\n    skjerm.setTextScale(<span class=\"hljs-number\">5</span>)\n    skjerm.clear()\n    <span class=\"hljs-keyword\">local</span> bredde, hoyde = skjerm.getSize()\n    <span class=\"hljs-keyword\">local</span> luft = <span class=\"hljs-built_in\">string</span>.rep(<span class=\"hljs-string\">\" \"</span>, bredde)      <span class=\"hljs-comment\">-- ny linje</span>\n    tekst = luft .. tekst .. luft             <span class=\"hljs-comment\">-- ny linje</span>\n\n    <span class=\"hljs-keyword\">local</span> lengde = #tekst\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">true</span> <span class=\"hljs-keyword\">do</span>\n        <span class=\"hljs-keyword\">for</span> i = <span class=\"hljs-number\">0</span>, lengde - bredde <span class=\"hljs-keyword\">do</span>\n            <span class=\"hljs-keyword\">local</span> deltekst = <span class=\"hljs-built_in\">string</span>.sub(tekst, i+<span class=\"hljs-number\">1</span>, i+bredde)\n            skjerm.setCursorPos(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>)\n            skjerm.clear()\n            skjerm.write(deltekst)\n            sleep(<span class=\"hljs-number\">0.2</span>)\n        <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">else</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Ingen skjerm er koblet til\"</span>)\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<figure>Pass på at det er et mellomromstegn i <code>string.rep(&quot; &quot;, bredde)</code>.</figure>\n</li>\n</ul>\n</section>\n";

/***/ },

/***/ 519:
/*!***************************************************************!*\
  !*** ../oppgaver/src/computercraft/sprettball/sprettball.png ***!
  \***************************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "_/oppgaver/src/computercraft/sprettball/sprettball.8e56fa.png";

/***/ },

/***/ 520:
/*!****************************************************************!*\
  !*** ../oppgaver/src/computercraft/sprettball/enkelskjerm.png ***!
  \****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "_/oppgaver/src/computercraft/sprettball/enkelskjerm.dc1087.png";

/***/ },

/***/ 521:
/*!*********************************************************************!*\
  !*** ../oppgaver/src/computercraft/sprettball/helloworld_liten.png ***!
  \*********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "_/oppgaver/src/computercraft/sprettball/helloworld_liten.64a6d8.png";

/***/ },

/***/ 522:
/*!********************************************************************!*\
  !*** ../oppgaver/src/computercraft/sprettball/helloworld_stor.png ***!
  \********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "_/oppgaver/src/computercraft/sprettball/helloworld_stor.e35fdd.png";

/***/ },

/***/ 523:
/*!*******************************************************!*\
  !*** ../oppgaver/src/computercraft/sprettball/ku.png ***!
  \*******************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "_/oppgaver/src/computercraft/sprettball/ku.789816.png";

/***/ },

/***/ 524:
/*!************************************************************!*\
  !*** ../oppgaver/src/computercraft/sprettball/reklame.png ***!
  \************************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "_/oppgaver/src/computercraft/sprettball/reklame.12cb17.png";

/***/ }

});
//# sourceMappingURL=sprettball.590c50e3a29f7dd19fa0.js.map