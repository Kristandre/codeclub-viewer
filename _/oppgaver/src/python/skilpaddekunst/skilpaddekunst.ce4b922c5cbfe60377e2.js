webpackJsonp([119,236],{

/***/ 952:
/*!******************************************************************************************************************************************************************************************************!*\
  !*** ./~/combine-loader/lib?{"frontmatter":["json","front-matter?onlyAttributes"],"content":["html","markdown-it","front-matter?onlyBody"]}!../oppgaver/src/python/skilpaddekunst/skilpaddekunst.md ***!
  \******************************************************************************************************************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = {"frontmatter": __webpack_require__(/*! -!json!front-matter?onlyAttributes!../oppgaver/src/python/skilpaddekunst/skilpaddekunst.md */ 953),"content": __webpack_require__(/*! -!html!markdown-it!front-matter?onlyBody!../oppgaver/src/python/skilpaddekunst/skilpaddekunst.md */ 954)}

/***/ },

/***/ 954:
/*!***************************************************************************************************************************************!*\
  !*** ./~/html-loader!./~/markdown-it-loader!./~/front-matter-loader?onlyBody!../oppgaver/src/python/skilpaddekunst/skilpaddekunst.md ***!
  \***************************************************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = "<section class=\"intro\" id=\"introduksjon\">\n<h1 class=\"intro\" id=\"introduksjon\">Introduksjon</h1>\n<p>Skilpadder (turtles på engelsk) er en form for roboter som har vært i\nbruk innen programmering i lang tid. Vi vil bruke\nskilpadde-biblioteket i Python til å utforske flere\nprogrammeringskonsepter samtidig som vi tegner kule bilder.</p>\n<figure><img src=\"" + __webpack_require__(/*! ./skilpaddekunst.png */ 955) + "\" alt=\"\" /></figure>\n</section>\n<section class=\"activity\" id=\"steg-1-mot-skilpadden\">\n<h1 class=\"activity\" id=\"steg-1-mot-skilpadden\">Steg 1: Møt skilpadden</h1>\n<p>For å bruke skilpadder i Python må vi importere et bibliotek som heter\n<code>turtle</code>. Slike biblioteker kalles <em>modules</em> i Python og brukes mye\nfor å organisere og gjenbruke kode som andre har skrevet. Det finnes\nflere måter å importere biblioteker på i Python. Vi vil her bruke den\nenkleste, hvor vi starter alle skilpaddeprogrammene våre med linjen</p>\n<pre><code class=\"language-python\"><span class=\"hljs-keyword\">from</span> turtle <span class=\"hljs-keyword\">import</span> *\n</code></pre>\n<p>Her betyr <code>*</code> alt, slik at linjen sier <code>Importer all kode fra turtle-biblioteket</code>.</p>\n<section class=\"protip\" id=\"turtles\">\n<h3 class=\"protip\" id=\"turtles\">Turtles</h3>\n<p>Navnet <strong>Turtle</strong> betyr <em>skilpadde</em> på norsk. Bakgrunnen til dette\nnavnet er historisk. For nesten 70 år siden bygde William Grey Walter\net par roboter som kunne bevege seg rundt. Disse beveget seg ganske\nsakte, og var lave og skallformet. De fikk derfor etterhvert\nkallenavnet skilpadder.</p>\n<p>Senere ble måten disse skilpaddene beveget seg på (vi skal se hvordan\nsnart) tatt inn i forskjellige programmeringsspråk, spesielt som en\nmåte å tegne på. Språket <em>Logo</em> er nok det som er mest kjent for slik\nskilpaddegrafikk, men nesten alle programmeringsspråk støtter dette i\ndag, inkludert for eksempel <em>Scratch</em>, <em>Lua</em> og <em>Python</em>.</p>\n</section>\n<section class=\"check\" id=\"sjekkliste\">\n<h2 class=\"check\" id=\"sjekkliste\">Sjekkliste</h2>\n<ul>\n<li>\n<p>Det er på tide å lage vår første skilpadde. Start IDLE og åpne et\nnytt programmeringsvindu. I dette nye vinduet kan du skrive inn\nfølgende kode:</p>\n<pre><code class=\"language-python\"><span class=\"hljs-keyword\">from</span> turtle <span class=\"hljs-keyword\">import</span> *\n\nshape(<span class=\"hljs-string\">'turtle'</span>)\nshapesize(<span class=\"hljs-number\">2</span>)\nbgcolor(<span class=\"hljs-string\">'darkblue'</span>)\ncolor(<span class=\"hljs-string\">'yellow'</span>)\n</code></pre>\n<p>Lagre programmet med navnet <code>skilpadde.py</code> og kjør det. Du skal nå\nfå opp et nytt vindu med en gul skilpadde på en blå bakgrunn. Hvis\ndette ikke skjer kan du se i det opprinnelige <code>Python Shell</code>-vinduet om du har fått en feilmelding.</p>\n</li>\n<li>\n<p>La oss se litt nøyere på hva programmet gjør så langt. Det er en god\nide å prøve å endre på ting i programmet for å se effekten av\nendringene og bedre forstå hvordan ting virker.</p>\n</li>\n<li>\n<p>Linjen <code>shape('turtle')</code> sier at vi vil bruke en skilpaddefigur. I\nstedet for <code>turtle</code> kan du også prøve <code>arrow</code>, <code>circle</code>, <code>square</code>,\n<code>triangle</code> eller <code>classic</code>.</p>\n</li>\n<li>\n<p>Med <code>shapesize(2)</code> forteller vi programmet hvor stor vi vil at\nskilpaddefiguren skal være. Prøv med andre tall!</p>\n</li>\n<li>\n<p>Kommandoene <code>bgcolor</code> og <code>color</code> bestemmer fargene på henholdsvis\nbakgrunnen og på skilpaddefiguren. Python kjenner til veldig mange\nfarger (men bare på engelsk), så prøv om du kan endre fargene til\nnoe du liker.</p>\n</li>\n<li>\n<p>I de senere programmene vil vi bruke disse linjene på toppen. Du kan\ngjerne bruke en variant av farger og figur som du liker bedre i\nstedet.</p>\n</li>\n</ul>\n</section>\n</section>\n<section class=\"activity\" id=\"steg-2-en-kunstnerisk-skilpadde\">\n<h1 class=\"activity\" id=\"steg-2-en-kunstnerisk-skilpadde\">Steg 2: En kunstnerisk skilpadde</h1>\n<p>Skilpadden er ikke bare fin å se på. Den kan også tegne! I dette\nsteget vil vi bli kjent med noen enkle kommandoer som gjør skilpadden\nom til en kunstner.</p>\n<section class=\"check\" id=\"sjekkliste-2\">\n<h2 class=\"check\" id=\"sjekkliste-2\">Sjekkliste</h2>\n<ul>\n<li>\n<figure>Legg til en linje nederst i programmet ditt, slik at det ser slik\nut:</figure>\n<pre><code class=\"language-python\"><span class=\"hljs-keyword\">from</span> turtle <span class=\"hljs-keyword\">import</span> *\n\nshape(<span class=\"hljs-string\">'turtle'</span>)\nshapesize(<span class=\"hljs-number\">2</span>)\nbgcolor(<span class=\"hljs-string\">'darkblue'</span>)\ncolor(<span class=\"hljs-string\">'yellow'</span>)\n\nforward(<span class=\"hljs-number\">200</span>)\n</code></pre>\n</li>\n<li>\n<p>Når du kjører programmet vil du se at skilpadden har beveget seg\nforover et lite stykke, og at den har tegnet en strek der den\nbeveget seg.</p>\n</li>\n<li>\n<p>I tillegg til <code>forward</code> kan vi også bruke kommandoene <code>backward</code> for\nå gå bakover, <code>left</code> for å svinge mot venstre og <code>right</code> for å\nsvinge mot høyre. Prøv for eksempel å endre programmet ditt til det\nfølgende:</p>\n<pre><code class=\"language-python\"><span class=\"hljs-keyword\">from</span> turtle <span class=\"hljs-keyword\">import</span> *\n\nshape(<span class=\"hljs-string\">'turtle'</span>)\nshapesize(<span class=\"hljs-number\">2</span>)\nbgcolor(<span class=\"hljs-string\">'darkblue'</span>)\ncolor(<span class=\"hljs-string\">'yellow'</span>)\n\nforward(<span class=\"hljs-number\">200</span>)\nleft(<span class=\"hljs-number\">60</span>)\nforward(<span class=\"hljs-number\">50</span>)\nbackward(<span class=\"hljs-number\">200</span>)\nright(<span class=\"hljs-number\">90</span>)\nforward(<span class=\"hljs-number\">100</span>)\n</code></pre>\n<p>Ser du at skilpadden utfører alle kommandoene du gir den?</p>\n</li>\n<li>\n<p>Hvis vi setter sammen kommandoene litt systematisk kan vi tegne noen\ngrunnleggende geometriske figurer. For eksempel, om vi vil tegne en\nfirkant kan vi først gå fremover, deretter svinge 90 grader (mot\nhøyre eller venstre), deretter fremover igjen, så svinge, så\nfremover, så svinge og til slutt fremover en gang til. I Python kan\nvi skrive dette som</p>\n<pre><code class=\"language-python\"><span class=\"hljs-keyword\">from</span> turtle <span class=\"hljs-keyword\">import</span> *\n\nshape(<span class=\"hljs-string\">'turtle'</span>)\nshapesize(<span class=\"hljs-number\">2</span>)\nbgcolor(<span class=\"hljs-string\">'darkblue'</span>)\ncolor(<span class=\"hljs-string\">'yellow'</span>)\n\nforward(<span class=\"hljs-number\">100</span>)\nright(<span class=\"hljs-number\">90</span>)\nforward(<span class=\"hljs-number\">100</span>)\nright(<span class=\"hljs-number\">90</span>)\nforward(<span class=\"hljs-number\">100</span>)\nright(<span class=\"hljs-number\">90</span>)\nforward(<span class=\"hljs-number\">100</span>)\nright(<span class=\"hljs-number\">90</span>)\n</code></pre>\n<p>Tegner skilpadden en firkant når du kjører dette programmet?</p>\n</li>\n<li>\n<p>Hva med en trekant? Hvordan må du forandre koden din for at\nskilpadden skal tegne en trekant i stedet for en firkant? Prøv selv\nå endre koden og kjør den, ble resultatet som du trodde?</p>\n</li>\n</ul>\n</section>\n</section>\n<section class=\"activity\" id=\"steg-3-gjenta-deg-selv\">\n<h1 class=\"activity\" id=\"steg-3-gjenta-deg-selv\">Steg 3: Gjenta deg selv</h1>\n<p>Hvis du ser på koden vi har brukt for å tegne trekanter og firkanter\nhar vi stadig gjentatt oss selv. I stedet for at vi skriver samme kode\nom og om igjen kan vi be Python gjenta deler av koden. Til dette\nbruker vi <strong>for-løkker</strong>.</p>\n<section class=\"check\" id=\"sjekkliste-3\">\n<h2 class=\"check\" id=\"sjekkliste-3\">Sjekkliste</h2>\n<ul>\n<li>\n<figure>Det følgende programmet tegner også en firkant, akkurat som det\ntidligere programmet vi lagde:</figure>\n<pre><code class=\"language-python\"><span class=\"hljs-keyword\">from</span> turtle <span class=\"hljs-keyword\">import</span> *\n\nshape(<span class=\"hljs-string\">'turtle'</span>)\nshapesize(<span class=\"hljs-number\">2</span>)\nbgcolor(<span class=\"hljs-string\">'darkblue'</span>)\ncolor(<span class=\"hljs-string\">'yellow'</span>)\n\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">4</span>):\n    forward(<span class=\"hljs-number\">100</span>)\n    right(<span class=\"hljs-number\">90</span>)\n</code></pre>\n<p>Endre koden din som over, og kjør programmet.</p>\n</li>\n<li>\n<p>Legg merke til at linjene som kommer etter <code>for</code> er skjøvet inn til\nhøyre. Dette er veldig viktig i Python, fordi det forteller hvor mye\nkode som skal gjentas i løkken. For å skyve koden inn på denne måten\nkan du bruke <code>Tab</code>-tasten i IDLE. For å trekke koden tilbake til\nvenstre kan du trykke <code>Shift</code> og <code>Tab</code>.</p>\n</li>\n<li>\n<p>Prøv å trekk linjen <code>right(90)</code> til venstre, slik at for-løkken ser\nslik ut:</p>\n<pre><code class=\"language-python\"><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">4</span>):\n    forward(<span class=\"hljs-number\">100</span>)\nright(<span class=\"hljs-number\">90</span>)\n</code></pre>\n<figure>Hva tror du programmet ditt vil gjøre nå? Forsøk å kjøre\nprogrammet for å se om du har rett!</figure>\n<p>Skilpadden vil bare gå fremover fire ganger før den svinger til\nhøyre en gang til slutt. Det betyr at den vil tegne en rett linje\ni stedet for en firkant.</p>\n</li>\n<li>\n<p>Nå som vi bruker en for-løkke har det også blitt mye enklere å endre\nkoden til å for eksempel tegne en trekant. Vi må endre 4 til 3 i\nfor-løkken. I tillegg må vi endre vinkelen skilpadden snur ved hvert\nhjørne. For at skilpadden skal gå en runde rundt trekanten må den\nsnu totalt 360 grader. Siden den snur tre ganger må den snu 120\ngrader (360 delt på 3) i hvert hjørne. Programmet for å tegne en\ntrekant blir dermed seende slik ut:</p>\n<pre><code class=\"language-python\"><span class=\"hljs-keyword\">from</span> turtle <span class=\"hljs-keyword\">import</span> *\n\nshape(<span class=\"hljs-string\">'turtle'</span>)\nshapesize(<span class=\"hljs-number\">2</span>)\nbgcolor(<span class=\"hljs-string\">'darkblue'</span>)\ncolor(<span class=\"hljs-string\">'yellow'</span>)\n\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">3</span>):\n    forward(<span class=\"hljs-number\">100</span>)\n    right(<span class=\"hljs-number\">120</span>)\n</code></pre>\n</li>\n<li>\n<p>Prøv å endre programmet slik at det tegner andre mangekanter.\nHvordan kan du tegne for eksempel en femkant, åttekant eller kanskje\nen femtenkant.</p>\n</li>\n</ul>\n</section>\n</section>\n<section class=\"activity\" id=\"steg-4-alle-ting-fortjener-et-navn\">\n<h1 class=\"activity\" id=\"steg-4-alle-ting-fortjener-et-navn\">Steg 4: Alle ting fortjener et navn</h1>\n<figure>Vi skal fortsette med å gjøre koden vår enda mer fleksibel ved å gi\nting navn. Dette vil også gjøre det enklere å forstå hva koden gjør.</figure>\n<section class=\"check\" id=\"sjekkliste-4\">\n<h2 class=\"check\" id=\"sjekkliste-4\">Sjekkliste</h2>\n<ul>\n<li>\n<p>Vi innfører først variabler som sier hvor mange sider vi vil tegne,\nhvor lang hver side skal være og hvor mange grader vi skal snu ved\nhvert hjørne. Endre programmet ditt slik at det ser slik ut:</p>\n<pre><code class=\"language-python\"><span class=\"hljs-keyword\">from</span> turtle <span class=\"hljs-keyword\">import</span> *\n\nshape(<span class=\"hljs-string\">'turtle'</span>)\nshapesize(<span class=\"hljs-number\">2</span>)\nbgcolor(<span class=\"hljs-string\">'darkblue'</span>)\ncolor(<span class=\"hljs-string\">'yellow'</span>)\n\nsides = <span class=\"hljs-number\">4</span>\nlength = <span class=\"hljs-number\">100</span>\nangle = <span class=\"hljs-number\">90</span>\n\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(sides):\n    forward(length)\n    right(angle)\n</code></pre>\n<p>Tegner programmet fortsatt en firkant?</p>\n</li>\n<li>\n<figure>Nå kan du få programmet til å tegne en trekant bare ved å endre\nverdiene på variablene dine. Prøv om du får det til?</figure>\n</li>\n<li>\n<p>Vi kan gjøre programmet enda smartere. I stedet for at du selv må\nregne vinkelen kan programmet gjøre det. Bytt ut linjen <code>angle = 90</code>\nmed</p>\n<pre><code class=\"language-python\">angle = <span class=\"hljs-number\">360</span> / sides\n</code></pre>\n<p>Nå kan du prøve å bare endre verdien av <code>sides</code> og kjøre om igjen.\nTegner programmet de riktige mangekantene?</p>\n</li>\n</ul>\n</section>\n</section>\n<section class=\"activity\" id=\"steg-5-egne-kommandoer\">\n<h1 class=\"activity\" id=\"steg-5-egne-kommandoer\">Steg 5: Egne kommandoer</h1>\n<figure>I Python kan vi også lage våre egne kommandoer ved å definere\nfunksjoner.  Dette er en annen måte vi kan unngå å gjenta oss selv på.</figure>\n<section class=\"check\" id=\"sjekkliste-5\">\n<h2 class=\"check\" id=\"sjekkliste-5\">Sjekkliste</h2>\n<ul>\n<li>\n<p>Vi skal nå lage en funksjon som tegner en mangekant. Dette gjør vi\nved å bruke kommandoen <code>def</code> (def er en forkortelse for <em>define</em> som\nbetyr definer). Endre programmet ditt slik at det ser ut som under:</p>\n<pre><code class=\"language-python\"><span class=\"hljs-keyword\">from</span> turtle <span class=\"hljs-keyword\">import</span> *\n\nshape(<span class=\"hljs-string\">'turtle'</span>)\nshapesize(<span class=\"hljs-number\">2</span>)\nbgcolor(<span class=\"hljs-string\">'darkblue'</span>)\ncolor(<span class=\"hljs-string\">'yellow'</span>)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">polygon</span><span class=\"hljs-params\">(sides, length)</span>:</span>\n    angle = <span class=\"hljs-number\">360</span> / sides\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(sides):\n        forward(length)\n        right(angle)\n\npolygon(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">100</span>)\n</code></pre>\n<p>Kjør programmet. Kjenner du igjen firkanten?</p>\n</li>\n<li>\n<p>Nå som vi har laget <code>polygon</code>-funksjonen er det kjempelett å tegne\nforskjellige mangekanter. Legg for eksempel til de følgende linjene\nnederst i programmet ditt:</p>\n<pre><code class=\"language-python\">polygon(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">100</span>)\npolygon(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">100</span>)\npolygon(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">100</span>)\nforward(<span class=\"hljs-number\">125</span>)\nright(<span class=\"hljs-number\">180</span>)\npolygon(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">150</span>)\npolygon(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">150</span>)\npolygon(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">150</span>)\n</code></pre>\n</li>\n</ul>\n</section>\n</section>\n<section class=\"activity\" id=\"steg-6-skilpaddekunst\">\n<h1 class=\"activity\" id=\"steg-6-skilpaddekunst\">Steg 6: Skilpaddekunst</h1>\n<figure>Vi vil til slutt generalisere funksjonen vår litt slik at den ikke\nbare tegner kjedelige mangekanter.</figure>\n<section class=\"check\" id=\"sjekkliste-6\">\n<h2 class=\"check\" id=\"sjekkliste-6\">Sjekkliste</h2>\n<ul>\n<li>\n<p>Vi lager nå en ny funksjon <code>polylines</code> som ligner veldig mye på\n<code>polygon</code>, men hvor vi også kan endre på vinklene slik at de ikke\nalltid summerer seg til 360. Dette gjør underverker for kunsten vår!\nEndre programmet ditt slik at det ser slik ut:</p>\n<pre><code class=\"language-python\"><span class=\"hljs-keyword\">from</span> turtle <span class=\"hljs-keyword\">import</span> *\n\nshape(<span class=\"hljs-string\">'turtle'</span>)\nshapesize(<span class=\"hljs-number\">2</span>)\nbgcolor(<span class=\"hljs-string\">'darkblue'</span>)\ncolor(<span class=\"hljs-string\">'yellow'</span>)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">polylines</span><span class=\"hljs-params\">(sides, length, angle)</span>:</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(sides):\n        forward(length)\n        right(angle)\n\npolylines(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">144</span>)\n</code></pre>\n<p>Kjør programmet. Hva tegner skilpadden nå?</p>\n</li>\n<li>\n<p>En annen variant kan være hvor vi tegner en litt skjev mangekant.\nFor eksempel den følgende kommandoen vil tegne firkanter hvor\nvinklene er 91 grader i stedet for 90 grader. Dette blir\noverraskende stilig. Bytt ut <code>polylines</code>-kommandoen med</p>\n<pre><code class=\"language-python\">polylines(<span class=\"hljs-number\">91</span>, <span class=\"hljs-number\">200</span>, <span class=\"hljs-number\">91</span>)\n</code></pre>\n</li>\n<li>\n<p>Vi kan også endre lengden av strekene etterhvert som vi tegner.\nDette skaper en fin spiraleffekt. Legg merke til hvor mye funksjonen\n<code>spiral</code> ligner på <code>polylines</code>:</p>\n<pre><code class=\"language-python\"><span class=\"hljs-keyword\">from</span> turtle <span class=\"hljs-keyword\">import</span> *\n\nshape(<span class=\"hljs-string\">'turtle'</span>)\nshapesize(<span class=\"hljs-number\">2</span>)\nbgcolor(<span class=\"hljs-string\">'darkblue'</span>)\ncolor(<span class=\"hljs-string\">'yellow'</span>)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">polylines</span><span class=\"hljs-params\">(sides, length, angle)</span>:</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(sides):\n        forward(length)\n        right(angle)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">spiral</span><span class=\"hljs-params\">(sides, length, angle)</span>:</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(sides):\n        forward(length)\n        right(angle)\n        length = length + <span class=\"hljs-number\">5</span>\n\nspiral(<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">125</span>)\n</code></pre>\n</li>\n<li>\n<p>Prøv forskjellige verdier i stedet for 100, 5 og 125 når du kaller\n<code>spiral</code>. Finner du noen verdier som gir spesielt fine bilder synes\ndu?</p>\n</li>\n</ul>\n</section>\n<section class=\"try\" id=\"prov-selv\">\n<h2 class=\"try\" id=\"prov-selv\">Prøv selv</h2>\n<p>Kombiner de forskjellige funksjonene vi har laget, <code>polygon</code>,\n<code>polylines</code> og <code>spiral</code> med de andre skilpadde-kommandoene du har lært\nsom for eksempel <code>forward</code> og <code>left</code>. Klarer du å tegne enda mer\nspennende kunstverk? Eller kanskje du kan tegne en by? Et hus kan for\neksempel lages ved først å tegne en firkant og deretter en trekant på\ntoppen for taket.</p>\n<p>Et tips helt på slutten er at funksjonene <code>penup()</code> og <code>pendown()</code>\nstyrer om skilpadden tegner mens den flytter på seg. Disse er veldig\nnyttige når man vil tegne flere figurer som ikke henger sammen.</p>\n<p>Et annet tips er funksjonen <code>speed()</code>. Denne justerer hastigheten som\nskilpadden tegner med. For eksempel vil <code>speed(1)</code> tegne veldig sakte,\nmens <code>speed(11)</code> tegner kjempefort.</p>\n</section>\n</section>\n";

/***/ },

/***/ 955:
/*!****************************************************************!*\
  !*** ../oppgaver/src/python/skilpaddekunst/skilpaddekunst.png ***!
  \****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "_/oppgaver/src/python/skilpaddekunst/skilpaddekunst.1d7bd6.png";

/***/ }

});
//# sourceMappingURL=skilpaddekunst.ce4b922c5cbfe60377e2.js.map