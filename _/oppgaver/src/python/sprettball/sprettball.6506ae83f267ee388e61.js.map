{"version":3,"sources":["webpack:///../oppgaver/src/python/sprettball/sprettball.md?76d4","webpack:///../oppgaver/src/python/sprettball/sprettball.md?b1d0"],"names":[],"mappings":";;;;;;;;AAAA,mBAAkB,sQ;;;;;;;;;;ACAlB,gkDAA+jD,o0BAAo0B,q4LAAq4L,wEAAwE,8OAA8O,yEAAyE,kvG","file":"_/oppgaver/src/python/sprettball/sprettball.6506ae83f267ee388e61.js","sourcesContent":["module.exports = {\"frontmatter\": require(\"-!json!front-matter?onlyAttributes!/home/kristoffer/Code/kodeklubben-react/oppgaver/src/python/sprettball/sprettball.md\"),\"content\": require(\"-!html!markdown-it!front-matter?onlyBody!/home/kristoffer/Code/kodeklubben-react/oppgaver/src/python/sprettball/sprettball.md\")}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/combine-loader/lib?{\"frontmatter\":[\"json\",\"front-matter?onlyAttributes\"],\"content\":[\"html\",\"markdown-it\",\"front-matter?onlyBody\"]}!../oppgaver/src/python/sprettball/sprettball.md\n ** module id = 979\n ** module chunks = 124\n **/","module.exports = \"<section class=\\\"intro\\\" id=\\\"introduksjon\\\">\\n<h1 class=\\\"intro\\\" id=\\\"introduksjon\\\">Introduksjon</h1>\\n<p>I denne oppgaven skal du lage en ballanimasjon, ved hjelp av det du har lært i\\n<a href=\\\"../enkle_objekter/enkle_objekter.html\\\">oppgaven om enkle objekter</a>, samt Pygame og Pygame\\nZero. Dersom du ikke husker objekter, kan du <a href=\\\"../enkle_objekter/enkle_objekter.html\\\">gå\\ntilbake</a> og raskt repetere.</p>\\n</section>\\n<section class=\\\"activity\\\" id=\\\"steg-1-hoyde-og-bredde\\\">\\n<h1 class=\\\"activity\\\" id=\\\"steg-1-hoyde-og-bredde\\\">Steg 1: Høyde og bredde</h1>\\n<p>Lag et nytt python-program med følgende kode:</p>\\n<pre><code class=\\\"language-python\\\">HEIGHT = <span class=\\\"hljs-number\\\">400</span>\\nWIDTH = <span class=\\\"hljs-number\\\">600</span>\\n</code></pre>\\n<figure>Kjør programmet, og se hva som skjer. Du skal nå se et svart vindu som er 400\\npiksler høyt, og 600 piksler bredt.</figure>\\n<p>En <strong>piksel</strong> er et lyspunkt på skjermen og nøyaktig hvor stort dette\\nlyspunktet er avhenger av hvilken skjerm du har - dermed kan det være at\\nvinduet får ulik størrelse på andre datamaskiner enn din egen.</p>\\n</section>\\n<section class=\\\"activity\\\" id=\\\"steg-2-lag-en-ball\\\">\\n<h1 class=\\\"activity\\\" id=\\\"steg-2-lag-en-ball\\\">Steg 2: Lag en ball!</h1>\\n<p>Vi skal nå lage en ball som vi kan vise på skjermen. Vi begynner med å lage en\\n<code>Ball</code>-klasse, som har variablene <code>radius</code> og <code>color</code>, samt en posisjon\\nbestående av <code>x</code> og <code>y</code>.</p>\\n<pre><code class=\\\"language-python\\\">COLORS = {\\n    <span class=\\\"hljs-string\\\">'red'</span>: (<span class=\\\"hljs-number\\\">255</span>, <span class=\\\"hljs-number\\\">0</span>, <span class=\\\"hljs-number\\\">0</span>),\\n    <span class=\\\"hljs-string\\\">'green'</span>: (<span class=\\\"hljs-number\\\">0</span>, <span class=\\\"hljs-number\\\">255</span>, <span class=\\\"hljs-number\\\">0</span>),\\n    <span class=\\\"hljs-string\\\">'blue'</span>: (<span class=\\\"hljs-number\\\">0</span>, <span class=\\\"hljs-number\\\">0</span>, <span class=\\\"hljs-number\\\">255</span>),\\n    <span class=\\\"hljs-string\\\">'white'</span>: (<span class=\\\"hljs-number\\\">255</span>, <span class=\\\"hljs-number\\\">255</span>, <span class=\\\"hljs-number\\\">255</span>),\\n    <span class=\\\"hljs-string\\\">'black'</span>: (<span class=\\\"hljs-number\\\">0</span>, <span class=\\\"hljs-number\\\">0</span>, <span class=\\\"hljs-number\\\">0</span>)\\n}\\n\\n<span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">Ball</span>:</span>\\n    radius =  <span class=\\\"hljs-number\\\">20</span>\\n    color = COLORS[<span class=\\\"hljs-string\\\">'red'</span>]\\n    x = WIDTH // <span class=\\\"hljs-number\\\">2</span>\\n    y = HEIGHT // <span class=\\\"hljs-number\\\">2</span>\\n</code></pre>\\n<p>Vi har her valgt å ha en rød ball, men du kan velge en annen farge fra\\n<code>COLORS</code>-ordboka om du vil det. Husk at <code>//</code> betyr 'heltallsdivisjon', dvs at\\nsvaret rundes av nedover, slik at vi får et helt tall som svar.</p>\\n<p>Vi må i tillegg ha en funksjon som kan tegne ballen vår. Denne skal vi kalle\\nfor <code>draw()</code>. Husk på at funksjonene som skal være en del av klassen må ha et\\ninnrykk. Vi må dermed endre på klassen, slik at den ser slik ut:</p>\\n<pre><code class=\\\"language-python\\\"><span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">Ball</span>:</span>\\n    radius = <span class=\\\"hljs-number\\\">20</span>\\n    color = COLORS[<span class=\\\"hljs-string\\\">'red'</span>]\\n    x = WIDTH // <span class=\\\"hljs-number\\\">2</span>\\n    y = HEIGHT // <span class=\\\"hljs-number\\\">2</span>\\n\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title\\\">draw</span><span class=\\\"hljs-params\\\">(self)</span>:</span>\\n        screen.draw.filled_circle((self.x, self.y), self.radius, self.color)\\n\\n</code></pre>\\n<p>Nå må er du nesten ferdig. Vi må lage et <code>Ball</code>-objekt, <code>ball1</code> og en global\\n<code>draw</code>-funksjon. Dette vil se slik ut:</p>\\n<pre><code class=\\\"language-python\\\">ball1 = Ball()\\n\\n<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title\\\">draw</span><span class=\\\"hljs-params\\\">()</span>:</span>\\n    screen.clear()\\n    ball1.draw()\\n</code></pre>\\n<p><code>screen.clear()</code> sørger for at vi tegner på en blank skjerm, og må alltid komme\\nførst i den globale funksjonen <code>draw()</code>.</p>\\n<section class=\\\"flag\\\" id=\\\"test-programmet-ditt\\\">\\n<h2 class=\\\"flag\\\" id=\\\"test-programmet-ditt\\\">Test programmet ditt</h2>\\n<figure>Du kan nå teste programmet ditt. Du skal få opp en ensfarget sirkel midt i\\nvinduet.</figure>\\n</section>\\n</section>\\n<section class=\\\"activity\\\" id=\\\"steg-3-bevegelse\\\">\\n<h1 class=\\\"activity\\\" id=\\\"steg-3-bevegelse\\\">Steg 3: Bevegelse</h1>\\n<p>Vi vil at ballen vår skal bevege seg. Hvordan skal vi få til dette? Vi lager\\nfunksjonen <code>update()</code>.</p>\\n<p>Først må vi legge til et par variabler som bestemmer farten på ballen. Vi skal\\nher ha en variabel for farten i y-retning, og en variabel for farten i\\nx-retning.</p>\\n<pre><code class=\\\"language-python\\\"><span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">Ball</span>:</span>\\n    radius =  <span class=\\\"hljs-number\\\">20</span>\\n    color = COLORS[<span class=\\\"hljs-string\\\">'red'</span>]\\n    x = WIDTH // <span class=\\\"hljs-number\\\">2</span>\\n    y = HEIGHT // <span class=\\\"hljs-number\\\">2</span>\\n    speed_x = <span class=\\\"hljs-number\\\">3</span>\\n    speed_y = <span class=\\\"hljs-number\\\">3</span>\\n</code></pre>\\n<p>Så må vi lage en en funksjon <code>update()</code> som er en del av <code>Ball</code>. Denne sørger\\nfor at ballen beveger seg <code>speed_x</code> piksler i x-retningen, og <code>speed_y</code> i\\ny-retningen.</p>\\n<pre><code class=\\\"language-python\\\"><span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">Ball</span>:</span>\\n    <span class=\\\"hljs-comment\\\"># ...</span>\\n\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title\\\">update</span><span class=\\\"hljs-params\\\">(self)</span>:</span>\\n        self.x += self.speed_x\\n        self.y += self.speed_y\\n</code></pre>\\n<p>I tillegg må vi ha en global funksjon <code>update()</code> som kaller <code>ball1.update()</code>:</p>\\n<pre><code class=\\\"language-python\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title\\\">update</span><span class=\\\"hljs-params\\\">()</span>:</span>\\n    ball1.update()\\n</code></pre>\\n<section class=\\\"flag\\\" id=\\\"test-programmet-ditt-2\\\">\\n<h2 class=\\\"flag\\\" id=\\\"test-programmet-ditt-2\\\">Test programmet ditt</h2>\\n<p>Du kan nå teste programmet ditt igjen. Ballen skal nå bevege seg, dersom alt er gjort riktig.</p>\\n<figure>Hva skjer når den kommer til kanten? I neste steg skal vi sørge for at ballen\\nikke forsvinner ut av vinduet.</figure>\\n</section>\\n</section>\\n<section class=\\\"activity\\\" id=\\\"steg-4-veggkollisjoner\\\">\\n<h1 class=\\\"activity\\\" id=\\\"steg-4-veggkollisjoner\\\">Steg 4: Veggkollisjoner</h1>\\n<p>Vi ønsker å la ballen sprette tilbake når den treffer en vegg. Her er det et\\npar ting vi må tenke på - hvordan oppdager vi at ballen treffer veggen, og\\nhvordan kan vi endre variablene slik at den spretter vekk fra veggen? Ballens\\nposisjon bestemmes av <code>x</code> og <code>y</code> men den har også <code>radius</code> som vi må ta hensyn\\ntil når vi skal oppdage om ballen treffer veggen. Når ballen treffer den\\nøverste eller den nederste veggen ønsker vi at farten reverseres i y-retning,\\ndet samme gjelder for farten i x-retning når vi treffer høyre eller venstre\\nvegg.</p>\\n<p>Vi må endre <code>update()</code>-funksjonen i <code>Ball</code>-klassen:</p>\\n<pre><code class=\\\"language-python\\\"><span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">Ball</span>:</span>\\n    <span class=\\\"hljs-comment\\\"># ...</span>\\n\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title\\\">update</span><span class=\\\"hljs-params\\\">(self)</span>:</span>\\n        self.x += self.speed_x\\n        self.y += self.speed_y\\n\\n        <span class=\\\"hljs-comment\\\"># sjekker for kollisjon i x-retning</span>\\n        <span class=\\\"hljs-keyword\\\">if</span> self.x + self.radius &gt;= WIDTH <span class=\\\"hljs-keyword\\\">or</span> self.x - self.radius &lt;= <span class=\\\"hljs-number\\\">0</span>:\\n            self.speed_x = -self.speed_x\\n\\n        <span class=\\\"hljs-comment\\\"># sjekker for kollisjon i y-retning</span>\\n        <span class=\\\"hljs-keyword\\\">if</span> self.y + self.radius &gt;= HEIGHT <span class=\\\"hljs-keyword\\\">or</span> self.y - self.radius &lt;= <span class=\\\"hljs-number\\\">0</span>:\\n            self.speed_y = -self.speed_y\\n</code></pre>\\n<section class=\\\"flag\\\" id=\\\"test-programmet-ditt-3\\\">\\n<h2 class=\\\"flag\\\" id=\\\"test-programmet-ditt-3\\\">Test programmet ditt</h2>\\n<figure>Kjør programmet ditt, og pass på at ballen spretter tilbake når den treffer en\\nav veggene.</figure>\\n</section>\\n</section>\\n<section class=\\\"activity\\\" id=\\\"steg-5-styre-farta-til-ballen\\\">\\n<h1 class=\\\"activity\\\" id=\\\"steg-5-styre-farta-til-ballen\\\">Steg 5: Styre farta til ballen</h1>\\n<p>Vi skal la brukeren styre farta til ballen ved hjelp av piltastene. Når\\nbrukeren trykker på 'Pil opp' skal ballen gå raskere oppover (evt. mindre fort\\nnedover), det motsatte skal skje om brukeren trykker 'Pil ned'. Det samme skal\\nskje om brukeren trykker på 'Pil høyre' eller 'Pil venstre', men da skal\\nfartsendringa skje i x-retning.</p>\\n<p>For å få til dette skal vi lage en <code>on_key_down()</code>-funksjon i <code>Ball</code>-klassen:</p>\\n<pre><code class=\\\"language-python\\\"><span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">Ball</span>:</span>\\n    <span class=\\\"hljs-comment\\\"># ...</span>\\n\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title\\\">on_key_down</span><span class=\\\"hljs-params\\\">(self, key)</span>:</span>\\n        <span class=\\\"hljs-keyword\\\">if</span> key == keys.LEFT:\\n            self.speed_x -= <span class=\\\"hljs-number\\\">1</span>\\n        <span class=\\\"hljs-keyword\\\">elif</span> key == keys.RIGHT:\\n            self.speed_x += <span class=\\\"hljs-number\\\">1</span>\\n        <span class=\\\"hljs-keyword\\\">elif</span> key == keys.UP:\\n            self.speed_y -= <span class=\\\"hljs-number\\\">1</span>\\n        <span class=\\\"hljs-keyword\\\">elif</span> key == keys.DOWN:\\n            self.speed_y += <span class=\\\"hljs-number\\\">1</span>\\n</code></pre>\\n<p>Legg merke til at funksjonen har et parameter, <code>key</code>, som brukes til å avgjøre\\nhvilken tast brukeren trykket på.</p>\\n<p>Vi trenger også en global <code>on_key_down()</code>-funksjon. Denne har også en\\n<code>key</code>-parameter, som sendes videre til <code>ball1.on_key_down()</code>.</p>\\n<pre><code class=\\\"language-python\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title\\\">on_key_down</span><span class=\\\"hljs-params\\\">(key)</span>:</span>\\n    ball1.on_key_down(key)\\n</code></pre>\\n<section class=\\\"flag\\\" id=\\\"test-programmet-ditt-4\\\">\\n<h2 class=\\\"flag\\\" id=\\\"test-programmet-ditt-4\\\">Test programmet ditt</h2>\\n<figure>Du skal nå ha en ball som spretter mellom vinduskantene, og du skal kunne styre\\nfarten ved hjelp av piltastene.</figure>\\n</section>\\n<section class=\\\"challenge\\\" id=\\\"utfordring-stopp-ballen\\\">\\n<h2 class=\\\"challenge\\\" id=\\\"utfordring-stopp-ballen\\\">Utfordring: Stopp ballen</h2>\\n<p>Vi ønsker å bruke mellomromstasten for å stoppe ballen. Dvs. sette <code>speed_x</code> og\\n<code>speed_y</code> til <code>0</code>. Prøv å endre funksjonen <code>on_key_down(key)</code> i <code>Ball</code>-klassen\\nfor å sjekke om brukeren har trykket på mellomromstasten.</p>\\n<p><strong>Hint:</strong> <code>key == keys.SPACE</code> vil være sant dersom brukeren trykker på\\nmellomromstasten.</p>\\n</section>\\n</section>\\n\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/html-loader!./~/markdown-it-loader!./~/front-matter-loader?onlyBody!../oppgaver/src/python/sprettball/sprettball.md\n ** module id = 981\n ** module chunks = 124\n **/"],"sourceRoot":""}