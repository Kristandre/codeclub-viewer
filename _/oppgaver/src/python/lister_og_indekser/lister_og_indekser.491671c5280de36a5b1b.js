webpackJsonp([111,236],{

/***/ 906:
/*!**************************************************************************************************************************************************************************************************************!*\
  !*** ./~/combine-loader/lib?{"frontmatter":["json","front-matter?onlyAttributes"],"content":["html","markdown-it","front-matter?onlyBody"]}!../oppgaver/src/python/lister_og_indekser/lister_og_indekser.md ***!
  \**************************************************************************************************************************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = {"frontmatter": __webpack_require__(/*! -!json!front-matter?onlyAttributes!../oppgaver/src/python/lister_og_indekser/lister_og_indekser.md */ 907),"content": __webpack_require__(/*! -!html!markdown-it!front-matter?onlyBody!../oppgaver/src/python/lister_og_indekser/lister_og_indekser.md */ 908)}

/***/ },

/***/ 908:
/*!***********************************************************************************************************************************************!*\
  !*** ./~/html-loader!./~/markdown-it-loader!./~/front-matter-loader?onlyBody!../oppgaver/src/python/lister_og_indekser/lister_og_indekser.md ***!
  \***********************************************************************************************************************************************/
/***/ function(module, exports) {

	module.exports = "<section class=\"intro\" id=\"introduksjon\">\n<h1 class=\"intro\" id=\"introduksjon\">Introduksjon</h1>\n<p>Denne oppgaven handler om <em>lister</em>, altså å samle flere ting i en og samme\nvariabel. Ettersom lister og løkker henger tett sammen i Python, bør du se på\n<a href=\"../repetisjon/repetisjon.html#l%C3%B8kker\">løkker i repetisjonsoppgaven</a> dersom du\nhar glemt hvordan løkker fungerer.</p>\n</section>\n<section class=\"activity\" id=\"hvordan-lage-lister\">\n<h1 class=\"activity\" id=\"hvordan-lage-lister\">Hvordan lage lister?</h1>\n</section>\n<section class=\"protip\" id=\"\">\n<h1 class=\"protip\" id=\"\"></h1>\n<p>Hver ting i en liste kalles et <em>element</em>. En liste lages ved å skrive elementer\ninni <code>[]</code>, med <code>,</code> mellom elementene:</p>\n<pre><code class=\"language-python\"><span class=\"hljs-prompt\">&gt;&gt;&gt; </span>lst = [<span class=\"hljs-string\">'egg'</span>, <span class=\"hljs-string\">'ham'</span>, <span class=\"hljs-string\">'spam'</span>]\n<span class=\"hljs-prompt\">&gt;&gt;&gt; </span>lst\n[<span class=\"hljs-string\">'egg'</span>, <span class=\"hljs-string\">'ham'</span>, <span class=\"hljs-string\">'spam'</span>]\n</code></pre>\n<p>Vi har nå ei liste som inneholder ordene <code>'egg'</code>, <code>'ham'</code> og <code>'spam'</code>.\nVanskeligere er det ikke! Vi kan også lage tomme lister:</p>\n<pre><code class=\"language-python\"><span class=\"hljs-prompt\">&gt;&gt;&gt; </span>lst = []\n<span class=\"hljs-prompt\">&gt;&gt;&gt; </span>lst\n[]\n</code></pre>\n<p>Ei liste kan inneholde alt mulig - tall, strenger og også andre lister:</p>\n<pre><code class=\"language-python\"><span class=\"hljs-prompt\">&gt;&gt;&gt; </span>lst = [ <span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">'komma'</span>, [<span class=\"hljs-number\">1</span> , <span class=\"hljs-number\">4</span>] ]\n<span class=\"hljs-prompt\">&gt;&gt;&gt; </span>lst\n[<span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">'komma'</span>, [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>]]\n</code></pre>\n</section>\n<section class=\"activity\" id=\"legge-til-og-fjerne-elementer\">\n<h1 class=\"activity\" id=\"legge-til-og-fjerne-elementer\">Legge til og fjerne elementer</h1>\n</section>\n<section class=\"protip\" id=\"-2\">\n<h1 class=\"protip\" id=\"-2\"></h1>\n<p>Hva om vi ønsker å legge til eller fjerne elementene fra lista vi vår? Da kan vi bruke de\nto funksjonene <code>lst.append(elm)</code> og <code>lst.remove(elm)</code>, der\n<code>lst</code> er lista og <code>elm</code> er elementet vi ønsker å legge til eller fjerne.</p>\n<p><code>lst.append(elm)</code> legger til <code>elm</code> på slutten av <code>lst</code>, slik som illustrert i\neksempelet:</p>\n<pre><code class=\"language-python\"><span class=\"hljs-prompt\">&gt;&gt;&gt; </span>lst = []\n<span class=\"hljs-prompt\">&gt;&gt;&gt; </span>lst.append(<span class=\"hljs-string\">'Per'</span>)\n<span class=\"hljs-prompt\">&gt;&gt;&gt; </span>lst\n[<span class=\"hljs-string\">'Per'</span>]\n<span class=\"hljs-prompt\">&gt;&gt;&gt; </span>lst.append(<span class=\"hljs-string\">'Ada'</span>)\n<span class=\"hljs-prompt\">&gt;&gt;&gt; </span>lst.append(<span class=\"hljs-string\">'Kim'</span>)\n<span class=\"hljs-prompt\">&gt;&gt;&gt; </span>lst\n[<span class=\"hljs-string\">'Per'</span>, <span class=\"hljs-string\">'Ada'</span>, <span class=\"hljs-string\">'Kim'</span>]\n</code></pre>\n<p><code>lst.remove(elm)</code> sletter det første elementet <code>elm</code> fra <code>lst</code>. Det vil si at\ndersom <code>elm</code> ligger flere ganger i <code>lst</code> slettes bare det første elementet lik\n<code>elm</code>:</p>\n<pre><code class=\"language-python\"><span class=\"hljs-prompt\">&gt;&gt;&gt; </span>lst = [<span class=\"hljs-string\">'Per'</span>, <span class=\"hljs-string\">'Ada'</span>, <span class=\"hljs-string\">'Kim'</span>, <span class=\"hljs-string\">'Ada'</span>]\n<span class=\"hljs-prompt\">&gt;&gt;&gt; </span>lst.remove(<span class=\"hljs-string\">\"Ada\"</span>)\n<span class=\"hljs-prompt\">&gt;&gt;&gt; </span>lst\n[<span class=\"hljs-string\">'Per'</span>, <span class=\"hljs-string\">'Kim'</span>, <span class=\"hljs-string\">'Ada'</span>]\n</code></pre>\n</section>\n<section class=\"check\" id=\"-3\">\n<h1 class=\"check\" id=\"-3\"></h1>\n<p>Vi skal nå lage et handleliste-program. Programmet skal be brukeren skrive inn\nmatvarer, og deretter skrive ut matvarene når <code>ferdig</code> skrives inn. Programmet\nskal fungere slik:</p>\n<pre>\n>>>\nSkriv inn en gjenstand: <font color=\"green\">ost</font>\nSkriv inn en gjenstand: <font color=\"green\">melk</font>\nSkriv inn en gjenstand: <font color=\"green\">brød</font>\nSkriv inn en gjenstand: <font color=\"green\">ferdig</font>\nost\nmelk\nbrød\n</pre>\n<p>Dette må du gjøre:</p>\n<ul>\n<li>\n<p>Lag ei tom liste.</p>\n</li>\n<li>\n<p>Be om input.</p>\n</li>\n<li>\n<figure>Så lenge input ikke er lik <code>ferdig</code>, legg til det nye elementet i lista.</figure>\n<p><strong>Hint:</strong> Hva slags løkke kan vi bruke her?</p>\n</li>\n<li>\n<p>Skriv ut hvert hvert element i lista.</p>\n<p><strong>Hint:</strong> Hva slags løkke kan vi bruke her?</p>\n</li>\n</ul>\n</section>\n<section class=\"activity\" id=\"indekser\">\n<h1 class=\"activity\" id=\"indekser\">Indekser</h1>\n</section>\n<section class=\"protip\" id=\"-4\">\n<h1 class=\"protip\" id=\"-4\"></h1>\n<p>Tenk deg at vi har ei liste, og ønsker å hente ut det andre elementet i lista.\nHvordan skal vi klare det? Da bruker vi noe kalt <em>indeks</em>. Indeks er plassen til elementet og skrives mellom <code>[]</code> rett etter variabelen: <code>lst[index]</code>. Her er et eksempel på en liste med tall:</p>\n<pre><code class=\"language-python\"><span class=\"hljs-prompt\">&gt;&gt;&gt; </span>lst = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\n<span class=\"hljs-prompt\">&gt;&gt;&gt; </span>lst[<span class=\"hljs-number\">1</span>]\n<span class=\"hljs-number\">2</span>\n</code></pre>\n<p>Du la kanskje merke til at vi skrev <code>1</code>, men fikk ut det andre elementet i\nlista? Det er fordi vi begynner å telle fra <code>0</code>. Dermed har det første\nelementet i lista indeks <code>0</code>, og det andre har indeks <code>1</code>. Datamaskiner\nbegynner å telle på null! Du husker kanskje at det samme skjer når vi bruker <code>range()</code>?</p>\n<pre><code class=\"language-python\"><span class=\"hljs-prompt\">&gt;&gt;&gt; </span>list(range(<span class=\"hljs-number\">5</span>))\n[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]\n</code></pre>\n<p>Til nå har vi brukt <code>for element in lst</code> for å gå igjennom elementene i lista,\nmen noen ganger kan det i tillegg være praktisk å telle hvor langt vi er kommet\ni lista. Til dette kan vi bruke <code>enumerate()</code>, som gir oss både verdien og\nindeksen:</p>\n<pre><code class=\"language-python\"><span class=\"hljs-prompt\">&gt;&gt;&gt; </span>lst = [<span class=\"hljs-string\">'Per'</span>, <span class=\"hljs-string\">'Kim'</span>, <span class=\"hljs-string\">'Ada'</span>]\n<span class=\"hljs-prompt\">&gt;&gt;&gt; </span><span class=\"hljs-keyword\">for</span> i, value <span class=\"hljs-keyword\">in</span> enumerate(lst):\n        print(i, value)\n\n<span class=\"hljs-number\">0</span> Per\n<span class=\"hljs-number\">1</span> Kim\n<span class=\"hljs-number\">2</span> Ada\n</code></pre>\n<p>I eksempelet over får <code>i</code> verdien av indeksen, og <code>value</code> får verdien av\nelementet. Det er nesten som ei vanlig <code>for</code>-løkke, men vi får indeksen i\ntillegg.</p>\n</section>\n<section class=\"check\" id=\"-5\">\n<h1 class=\"check\" id=\"-5\"></h1>\n<figure>Modifiser nå programmet fra forrige oppgave til å skrive ut indekser ved\nsiden gjenstandene i handlelista. Slik skal det fungere:</figure>\n<pre>\n>>>\nSkriv inn en gjenstand: <font color=\"green\">ost</font>\nSkriv inn en gjenstand: <font color=\"green\">melk</font>\nSkriv inn en gjenstand: <font color=\"green\">brød</font>\nSkriv inn en gjenstand: <font color=\"green\">ferdig</font>\n0 ost\n1 melk\n2 brød\n</pre>\n<p>Dette må du gjøre:</p>\n<ul>\n<li>Bruk programmet fra oppgaven over.</li>\n<li>Bruk <code>enumerate</code> til for å få indeksen til hver element.</li>\n<li>Skriv ut indeksen på samme linje som elementet i lista.</li>\n</ul>\n<section class=\"challenge\" id=\"indekstrening\">\n<h2 class=\"challenge\" id=\"indekstrening\">Indekstrening</h2>\n<figure>Vi vil nå la brukeren selv velge hvor mange gjenstander som skal skrives ut.\nSlik som i eksempelet:</figure>\n<pre>\n>>>\nSkriv inn en gjenstand: <font color=\"green\">ost</font>\nSkriv inn en gjenstand: <font color=\"green\">melk</font>\nSkriv inn en gjenstand: <font color=\"green\">brød</font>\nSkriv inn en gjenstand: <font color=\"green\">ferdig</font>\nHvor mange gjenstander vil du skrive ut? <font color=\"green\">2</font>\n0 ost\n1 melk\n</pre>\n<p>Dette må du gjøre:</p>\n<ul>\n<li>Begynn med programmet du allerede har.</li>\n<li>Før gjenstandene skrives ut, spør om hvor mye som skal skrives ut.</li>\n<li>Avbryt utskriften når antallet er lik det brukeren ba om.</li>\n</ul>\n</section>\n</section>\n<section class=\"activity\" id=\"strenger-og-indekser\">\n<h1 class=\"activity\" id=\"strenger-og-indekser\">Strenger og indekser</h1>\n</section>\n<section class=\"protip\" id=\"-6\">\n<h1 class=\"protip\" id=\"-6\"></h1>\n<p>Vi kan også bruke indekser på strenger. For eksempel:</p>\n<pre><code class=\"language-python\"><span class=\"hljs-prompt\">&gt;&gt;&gt; </span>s = <span class=\"hljs-string\">\"Ada\"</span>\n<span class=\"hljs-prompt\">&gt;&gt;&gt; </span>s[<span class=\"hljs-number\">0</span>]\n<span class=\"hljs-string\">'A'</span>\n</code></pre>\n</section>\n<section class=\"check\" id=\"-7\">\n<h1 class=\"check\" id=\"-7\"></h1>\n<figure>Vi skal nå skrive et program som henter input fra brukeren og skriver ut\nannenhver bokstav. Det skal fungere som dette:</figure>\n<pre>\n>>>\nSkriv inn en setning: <font color=\"green\">Hei på deg!</font>\nH\ni\np\n\ne\n!\n</pre>\n<p>Dette må du gjøre:</p>\n<ul>\n<li>\n<p>Hent input fra brukeren.</p>\n</li>\n<li>\n<p>Bruk en løkke for å hente ut hver bokstav og dens indeks.</p>\n</li>\n<li>\n<p>Hvis indeksen er et partall, skriv ut bokstaven.</p>\n<p><strong>Hint:</strong> <code>tall%2</code> er <em>resten</em> av <code>tall</code> delt på <code>2</code>, hva gir <code>tall%2</code> når <code>tall</code> er et partall?</p>\n</li>\n</ul>\n</section>\n";

/***/ }

});
//# sourceMappingURL=lister_og_indekser.491671c5280de36a5b1b.js.map