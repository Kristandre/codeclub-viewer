webpackJsonp([116,236],{

/***/ 933:
/*!**********************************************************************************************************************************************************************************************!*\
  !*** ./~/combine-loader/lib?{"frontmatter":["json","front-matter?onlyAttributes"],"content":["html","markdown-it","front-matter?onlyBody"]}!../oppgaver/src/python/repetisjon/repetisjon.md ***!
  \**********************************************************************************************************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = {"frontmatter": __webpack_require__(/*! -!json!front-matter?onlyAttributes!../oppgaver/src/python/repetisjon/repetisjon.md */ 934),"content": __webpack_require__(/*! -!html!markdown-it!front-matter?onlyBody!../oppgaver/src/python/repetisjon/repetisjon.md */ 935)}

/***/ },

/***/ 935:
/*!*******************************************************************************************************************************!*\
  !*** ./~/html-loader!./~/markdown-it-loader!./~/front-matter-loader?onlyBody!../oppgaver/src/python/repetisjon/repetisjon.md ***!
  \*******************************************************************************************************************************/
/***/ function(module, exports) {

	module.exports = "<section class=\"intro\" id=\"introduksjon\">\n<h1 class=\"intro\" id=\"introduksjon\">Introduksjon</h1>\n<figure>I denne oppgaven skal vi repetere litt Python-syntaks, det er en god blanding\nav alle tingene du har lært i Python til nå.</figure>\n</section>\n<section class=\"activity\" id=\"kodeblokker\">\n<h1 class=\"activity\" id=\"kodeblokker\">Kodeblokker</h1>\n<figure>I oppgavene er noen eksempler så korte at vi kan skrive de direkte inn i\nPython. Her er en kodeblokk som illustrerer et kort eksempel:</figure>\n<pre><code class=\"language-python\"><span class=\"hljs-prompt\">&gt;&gt;&gt; </span><span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">2</span>\n<span class=\"hljs-keyword\">False</span>\n</code></pre>\n<p>Her betyr <code>&gt;&gt;&gt;</code> at Python er klar til å ta imot kode, <code>1 == 2</code> er koden, mens\n<code>False</code> er svaret.</p>\n<p>I andre eksempler er det ikke noe svar, men en utskrift av tekst isteden:</p>\n<pre><code class=\"language-python\"><span class=\"hljs-prompt\">&gt;&gt;&gt; </span>print(<span class=\"hljs-string\">\"Hei!\"</span>)\nHei!\n</code></pre>\n<p>Når vi ikke bruker <code>&gt;&gt;&gt;</code> i kodeblokkene, er det fordi koden er flere linjer\nlang. Da er det bedre å bruke en fil:</p>\n<pre><code class=\"language-python\"><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">5</span>):\n    <span class=\"hljs-keyword\">if</span> i == <span class=\"hljs-number\">3</span>:\n        print(i)\n    <span class=\"hljs-keyword\">else</span>:\n        print(<span class=\"hljs-number\">2</span>*i)\n</code></pre>\n<p>Og når vi kjører denne filen i IDLE får vi utskriften:</p>\n<pre><code class=\"language-python\">&gt;&gt;&gt;\n<span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">4</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">8</span>\n</code></pre>\n<figure>Noen ganger har vi eksempler med input fra brukeren. Da vil teksten brukeren\nskriver være grønn, mens det programmet skriver ut vil være svart:</figure>\n<pre>\n>>>\nHva heter du? <font color=\"green\">Ada</font>\nHei, Ada!\n</pre>\n</section>\n<section class=\"activity\" id=\"input-og-output\">\n<h1 class=\"activity\" id=\"input-og-output\">Input og output</h1>\n<section class=\"protip\" id=\"input-og-print\">\n<h2 class=\"protip\" id=\"input-og-print\">input() og print()</h2>\n<p>Vi kan bruke <code>print()</code> når vi skal skrive ut tekst til brukeren.\nKoden etter <code>&gt;&gt;&gt;</code> er kode vi skriver inn i f.eks. IDLE, og som\nkjøres med en gang.</p>\n<pre><code class=\"language-python\"><span class=\"hljs-prompt\">&gt;&gt;&gt; </span>print(<span class=\"hljs-string\">\"Hei, verden\"</span>)\nHei, verden\n</code></pre>\n<p><code>input()</code> brukes når du ønsker å la brukeren gi input til programmet ditt.</p>\n<pre><code class=\"language-python\"><span class=\"hljs-prompt\">&gt;&gt;&gt; </span>number = input(<span class=\"hljs-string\">\"Skriv inn et tall: \"</span>)\nSkriv inn et tall: <span class=\"hljs-number\">15</span>\n<span class=\"hljs-prompt\">&gt;&gt;&gt; </span>print(<span class=\"hljs-string\">\"Du skrev inn: \"</span> + str(number))\nDu skrev inn: <span class=\"hljs-number\">15</span>\n</code></pre>\n<!--A little workaround to avoid checklist being a part of protip-->\n</section>\n</section>\n<section class=\"check\" id=\"\">\n<h1 class=\"check\" id=\"\"></h1>\n<figure>Skriv et program som spør om brukerens navn, og så skriver ut en\nhilsen til brukeren. Det kan for eksempel fungere slik:</figure>\n<pre>\n>>>\nHei! Hva er navnet ditt?\n<font color=\"green\">Per</font>\nHyggelig å treffe deg, Per!\n</pre>\n<p>Dette må du gjøre:</p>\n<ul>\n<li>Spør om brukerens navn.</li>\n<li>Lagre brukerens navn i en variabel.</li>\n<li>Skriv ut en hilsen til brukeren som inneholder navnet brukeren skrev inn.</li>\n</ul>\n</section>\n<section class=\"activity\" id=\"if-elif-else\">\n<h1 class=\"activity\" id=\"if-elif-else\">if-elif-else</h1>\n<section class=\"protip\" id=\"-2\">\n<h2 class=\"protip\" id=\"-2\"></h2>\n<p>Vi bruker <code>if</code>, <code>elif</code> og <code>else</code> for å bestemme hva som skjer i et program.\nEtter <code>if</code> og <code>elif</code> kommer en test og deretter <code>:</code>, mens etter <code>else</code> kommer\nalltid <code>:</code> uten noen test. På linjen under <code>:</code> skrives kodeblokken som skal\nkjøres dersom testen er sann (<code>if</code> eller <code>elif</code>), eller dersom alle testene\nusanne (<code>else</code>).</p>\n<p>Husk at du alltid må starte med en <code>if</code>-setning, og må ha alle <code>elif</code>-setningene\nfør en <code>else</code>-blokk. Du <em>trenger ikke</em> å bruke verken <code>elif</code>-setninger eller\n<code>else</code>-blokk dersom du ikke ønsker det.</p>\n<p>For eksempel slik:</p>\n<pre><code class=\"language-python\">name = <span class=\"hljs-string\">\"Ada\"</span>\n<span class=\"hljs-keyword\">if</span> name == <span class=\"hljs-string\">\"Per\"</span>:\n    print(<span class=\"hljs-string\">\"Per er et guttenavn\"</span>)\n<span class=\"hljs-keyword\">elif</span> name == <span class=\"hljs-string\">\"Ada\"</span>:\n    print(<span class=\"hljs-string\">\"Ada er et jentenavn\"</span>)\n<span class=\"hljs-keyword\">elif</span> name == <span class=\"hljs-string\">\"Kim\"</span>:\n    print(<span class=\"hljs-string\">\"Kim kan være både guttenavn og jentenavn.\"</span>)\n<span class=\"hljs-keyword\">else</span>:\n    print(<span class=\"hljs-string\">\"Jeg vet ikke om \"</span> + navn + <span class=\"hljs-string\">\" er en gutt eller ei jente.\"</span>)\n</code></pre>\n<!--A little workaround to avoid checklist being a part of protip-->\n</section>\n</section>\n<section class=\"check\" id=\"-3\">\n<h1 class=\"check\" id=\"-3\"></h1>\n<p>Du skal nå lage et program som finner ut hvilken aldersgruppe brukeren er i;\nbarn, ungdom, voksen eller pensjonist. Du kan selv bestemme hvor aldersgrensene\nskal gå. Det kan for eksempel fungere slik:</p>\n<pre>\n>>>\nHei! Hva er alderen din?\n<font color=\"green\">77</font>\nDu er visst en pensjonist.\n</pre>\n<p>Det du trenger å gjøre er:</p>\n<ul>\n<li>Spør om brukerens alder.</li>\n<li>Lagre alderen til en variabel.</li>\n<li>Test om alderen er barn, ungdom, voksen eller pensjonist.</li>\n<li>Skriv ut hvilken aldersgruppe brukeren er i.</li>\n</ul>\n</section>\n<section class=\"activity\" id=\"lokker\">\n<h1 class=\"activity\" id=\"lokker\">Løkker</h1>\n<section class=\"protip\" id=\"for-lokker\">\n<h2 class=\"protip\" id=\"for-lokker\">for-løkker</h2>\n<p><code>for</code>-løkker brukes når vi ønsker å gjøre ting flere ganger.</p>\n<pre><code class=\"language-python\"><span class=\"hljs-comment\"># print Hello three times</span>\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">3</span>):\n    print(<span class=\"hljs-string\">\"Hello\"</span>)\n</code></pre>\n<p>Da får vi ut:</p>\n<pre><code><span class=\"hljs-prompt\">&gt;&gt;</span>&gt;\n<span class=\"hljs-constant\">Hello</span>\n<span class=\"hljs-constant\">Hello</span>\n<span class=\"hljs-constant\">Hello</span>\n</code></pre>\n<figure>Vi kan også bruke <code>for</code>-løkker når vi ønsker å gå igjennom ei liste:</figure>\n<pre><code class=\"language-python\"><span class=\"hljs-comment\"># print all elements in the list food_list</span>\nfood_list = [<span class=\"hljs-string\">\"eggs\"</span>, <span class=\"hljs-string\">\"ham\"</span>, <span class=\"hljs-string\">\"spiced ham\"</span>, <span class=\"hljs-string\">\"jam\"</span>]\n<span class=\"hljs-keyword\">for</span> food <span class=\"hljs-keyword\">in</span> food_list:\n    print(food)\n</code></pre>\n<p>Dette programmet vil skrive ut:</p>\n<pre><code><span class=\"hljs-prompt\">&gt;&gt;</span>&gt;\neggs\nham\nspiced ham\njam\n</code></pre>\n<!--A little workaround to avoid checklist being a part of protip-->\n</section>\n</section>\n<section class=\"check\" id=\"-4\">\n<h1 class=\"check\" id=\"-4\"></h1>\n<figure>Du skal nå lage ei liste med navn, og skrive ut alle navnene i lista. Resultatet\nkan se omtrent slik ut:</figure>\n<pre><code><span class=\"hljs-prompt\">&gt;&gt;</span>&gt;\n<span class=\"hljs-constant\">Per</span>\n<span class=\"hljs-constant\">Ada</span>\n<span class=\"hljs-constant\">Kim</span>\n</code></pre>\n<p>Dette du må gjøre:</p>\n<ul>\n<li>Lag ei liste med navn.</li>\n<li>Bruk ei løkke for å gå igjennom lista med navn.</li>\n<li>Skriv ut hvert navn.</li>\n</ul>\n</section>\n<section class=\"protip\" id=\"range\">\n<h1 class=\"protip\" id=\"range\">range()</h1>\n<p><code>range()</code> lager en rekke med tall. Rekken kan brukes til å gjøre noe mange\nganger med hjelp av en <code>for</code>- eller <code>while</code>-løkke. <code>range()</code> tar inn tre\nargumenter <code>start</code>, <code>stop</code>, <code>step</code>:</p>\n<ul>\n<li><code>start</code> forteller hva vi skal telle fra.</li>\n<li><code>stop</code> forteller hva vi skal telle til, merk at vi <strong>ikke</strong> teller\nmed slutt-tallet.</li>\n<li><code>step</code> forteller hvor store steg vi skal telle med. Vi kan for eksempel\ntelle med steg på <code>2</code> eller steg på <code>100</code>.</li>\n</ul>\n<p>Ettersom rekken lages etterhvert som man teller over den, må man konvertere\nrekken til en liste dersom vi ønsker å se tallene i rekken. Rekken konverteres\ntil en liste med <code>list()</code>. Her er noen eksempler:</p>\n<pre><code class=\"language-python\"><span class=\"hljs-prompt\">&gt;&gt;&gt; </span>list(range(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">1</span>))\n[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>]\n<span class=\"hljs-prompt\">&gt;&gt;&gt; </span>list(range(<span class=\"hljs-number\">10</span>))\n[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>]\n<span class=\"hljs-prompt\">&gt;&gt;&gt; </span>list(range(<span class=\"hljs-number\">200</span>, <span class=\"hljs-number\">500</span>))\n[<span class=\"hljs-number\">200</span>, <span class=\"hljs-number\">201</span>, <span class=\"hljs-number\">202</span>, ..., <span class=\"hljs-number\">497</span>, <span class=\"hljs-number\">498</span>, <span class=\"hljs-number\">499</span>]\n<span class=\"hljs-prompt\">&gt;&gt;&gt; </span>list(range(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">5</span>))\n[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">35</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">45</span>]\n</code></pre>\n<p><code>range()</code> kan brukes på mange måter, vi kan for eksempel gå igjennom den og\nsummere alle tallene fra 1 til 100:</p>\n<pre><code class=\"language-python\">sum = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">for</span> number <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">101</span>):\n    sum += number\nprint(sum)\n</code></pre>\n</section>\n<section class=\"protip\" id=\"while-lokker\">\n<h1 class=\"protip\" id=\"while-lokker\">while-løkker</h1>\n<p><code>while</code>-løkker har mange ulike bruksområder. De kan for eksempel brukes når\ndu vil kjøre kode inntil noe inntreffer:</p>\n<pre><code class=\"language-python\">word = <span class=\"hljs-string\">\"\"</span>\n<span class=\"hljs-keyword\">while</span> word != <span class=\"hljs-string\">\"exit\"</span>:\n    print(word)\n    word = input(<span class=\"hljs-string\">\"Please write a word: \"</span>)\n</code></pre>\n<p>Den samme løkken kan også skrive slik:</p>\n<pre><code class=\"language-python\"><span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">True</span>:\n    word = input(<span class=\"hljs-string\">\"Please write a word: \"</span>)\n    <span class=\"hljs-keyword\">if</span> word == <span class=\"hljs-string\">\"exit\"</span>:\n        <span class=\"hljs-keyword\">break</span>\n    print(word)\n</code></pre>\n<!--A little workaround to avoid checklist being a part of protip-->\n</section>\n<section class=\"check\" id=\"-5\">\n<h1 class=\"check\" id=\"-5\"></h1>\n<p>Skriv et program som summerer alle tallene fra <code>1</code> til <code>100</code> ved hjelp av ei\n<code>while</code>-løkke. Pass på at du får <code>5050</code> som svar.</p>\n<p>Dette må du gjøre:</p>\n<ul>\n<li>Lag en variabel som inneholder summen.</li>\n<li>Lag en tellevariabel som inneholder tallet du er kommet til.</li>\n<li>Så lenge tellevariabelen ikke er større enn 100:\n<ul>\n<li>Oppdater summen.</li>\n<li>Inkrementer tellevariabelen din.</li>\n</ul>\n</li>\n</ul>\n</section>\n<section class=\"activity\" id=\"funksjoner\">\n<h1 class=\"activity\" id=\"funksjoner\">Funksjoner</h1>\n</section>\n<section class=\"protip\" id=\"-6\">\n<h1 class=\"protip\" id=\"-6\"></h1>\n<figure>Funksjoner lar oss gjenbruke kode, og er svært nyttig når vi skal programmere\nmer enn noen få linjer. En funksjon er på formen:</figure>\n<pre><code class=\"language-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">greet</span><span class=\"hljs-params\">(name)</span>:</span>\n    print(<span class=\"hljs-string\">\"Hei, \"</span> + name + <span class=\"hljs-string\">\"!\"</span>)\n\ngreet(<span class=\"hljs-string\">\"Per\"</span>)\n</code></pre>\n<p>Her har vi en funksjon med navn <code>greet</code>, som skriver ut en hilsen. <code>name</code> er\net <strong>parameter</strong>, det vil si at <code>name</code> er en variabel som funksjonen <code>greet</code>\ntar imot. Når vi <strong>kaller</strong> funksjonen <code>greet</code>, med <code>greet(&quot;Per&quot;)</code> er <code>&quot;Per&quot;</code> et\n<strong>argument</strong> til funksjonen. Et argument er den variabelen vi gir til funksjonen\nnår vi kaller den.</p>\n<p>Vi kan også lage funksjoner som returnerer en verdi. Det vil se slik ut:</p>\n<pre><code class=\"language-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">multiply</span><span class=\"hljs-params\">(x, y)</span>:</span>\n    product = x*y\n    <span class=\"hljs-keyword\">return</span> product\n</code></pre>\n<!--A little workaround to avoid checklist being a part of protip-->\n</section>\n<section class=\"check\" id=\"-7\">\n<h1 class=\"check\" id=\"-7\"></h1>\n<figure>Nå skal vi lage en funksjon som adderer to tall. Test at\nfunksjonen din fungerer som dette:</figure>\n<pre><code class=\"language-python\"><span class=\"hljs-prompt\">&gt;&gt;&gt; </span>sum = add(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>)\nFikk inn <span class=\"hljs-number\">3</span> og <span class=\"hljs-number\">4</span>\n<span class=\"hljs-prompt\">&gt;&gt;&gt; </span>print(sum)\n<span class=\"hljs-number\">7</span>\n</code></pre>\n<p>Dette må du gjøre:</p>\n<ul>\n<li>Definer en funksjon som tar inn to tall som parametre.</li>\n<li>Skriv ut tallene du fikk inn.</li>\n<li>Regn ut summen.</li>\n<li>Returner summen.</li>\n</ul>\n</section>\n";

/***/ }

});
//# sourceMappingURL=repetisjon.09c411df585a82796b72.js.map