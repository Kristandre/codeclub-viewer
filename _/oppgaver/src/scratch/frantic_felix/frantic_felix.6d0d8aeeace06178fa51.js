webpackJsonp([144,236],{

/***/ 1100:
/*!*****************************************************************************************************************************************************************************************************!*\
  !*** ./~/combine-loader/lib?{"frontmatter":["json","front-matter?onlyAttributes"],"content":["html","markdown-it","front-matter?onlyBody"]}!../oppgaver/src/scratch/frantic_felix/frantic_felix.md ***!
  \*****************************************************************************************************************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = {"frontmatter": __webpack_require__(/*! -!json!front-matter?onlyAttributes!../oppgaver/src/scratch/frantic_felix/frantic_felix.md */ 1101),"content": __webpack_require__(/*! -!html!markdown-it!front-matter?onlyBody!../oppgaver/src/scratch/frantic_felix/frantic_felix.md */ 1102)}

/***/ },

/***/ 1102:
/*!**************************************************************************************************************************************!*\
  !*** ./~/html-loader!./~/markdown-it-loader!./~/front-matter-loader?onlyBody!../oppgaver/src/scratch/frantic_felix/frantic_felix.md ***!
  \**************************************************************************************************************************************/
/***/ function(module, exports) {

	module.exports = "<section class=\"intro\" id=\"introduksjon\">\n<h1 class=\"intro\" id=\"introduksjon\">Introduksjon:</h1>\n<p>I dette prosjektet skal du lage et komplett spill. Det er et\nplattformspill, hvor katten Felix hopper rundt, unnslipper slemminger\nog samler nøkler for å slippe ut av hulen. Når han kommer seg ut,\nfortsetter spillet i neste hule.</p>\n<p>I del 1 av dette prosjektet kommer du til å lære hvordan vi får Felix\ntil å flytte seg og samhandle med forskjellige ting. I del 2 skal du\ndesigne egne brett og nivåer. Til slutt skal du sette brettene sammen\ntil et ferdig spill.</p>\n</section>\n<section id=\"del-1-lag-byggeklossene\">\n<h1 id=\"del-1-lag-byggeklossene\">Del 1: Lag byggeklossene</h1>\n<p>Plattformspill, som for eksempel <strong>Manic Miner</strong> og <strong>Mario Bros</strong>,\nhandler om en figur som beveger seg rundt i en verden og hopper inn i\nting. Noen ting, som vegger, stopper deg. Andre ting, som slemminger,\ntar livet av deg. Ting som nøkler må du samle på. Andre ting er\nbakgrunner og påvirker ikke spillet i det heletatt.</p>\n<p>Det betyr at det å vite når du har kommet bort i noe er\nviktig. Scratch har noen klosser for å oppdage at noe berører noe\nannet: <code class=\"blocksensing\">berører sprite</code>, <code class=\"blocksensing\">berører farge?</code>-kloss, <code class=\"blocksensing\">farge berører?</code>-kloss,\nog <code class=\"blocksensing\">avstand til</code>-kloss. Men for å lage spillet, må du\nvite mer enn at to figurer har kommet borti hverandre; du trenger å\nvite hvilken <strong>side</strong> som berøres. Hvis du går mot en vegg til\nvenstre, kan du ikke gå lengre til venstre. Men du kan fortsatt gå til\nhøyre, eller hoppe, eller falle ned hvis det ikke er noe gulv å stå\npå.</p>\n<p>Hvis du berører en slemming, kan dette skade deg; men hvis du berører\nslemmingen med beina, kan du skade den. Ingen av de innebygde\nScratchklossene kan si noe om <strong>retningen av berøringen</strong>. Vi må\nderfor bygge våre egne berøringssensorer.</p>\n</section>\n<section class=\"activity\" id=\"steg-1-beroringssensor\">\n<h1 class=\"activity\" id=\"steg-1-beroringssensor\">Steg 1: Berøringssensor</h1>\n<p>Vi skal ha fire figurer som følger etter Frantic Felix. <strong>Hver figur\noppdager berøring i én retning og setter en variabel hvis det oppstår\nen berøring</strong>. Hovedfiguren Felix bruker disse variablene for å\nkontrollere hvordan Felix kan bevege seg. Hver berøringssensor har en\nfarget linje og bruker <code class=\"blocksensing\">farge berører?</code>-klossen for å\noppdage ting. Vi bruker <strong>svart</strong> for gulvet og <strong>grønn</strong> for\nhinder. Vi bruker <strong>rød</strong> for berøringssensorene.</p>\n<section class=\"check\" id=\"sjekkliste\">\n<h2 class=\"check\" id=\"sjekkliste\">Sjekkliste</h2>\n<ul>\n<li>\n<p><strong>Åpne et nytt prosjekt</strong>. Legg til <strong>frantic-felix/testlevel</strong>\nbakgrunnen og slett den hvite <strong>background1</strong>.</p>\n</li>\n<li>\n<p><strong>Endre navn på figur Sprite1 til Felix</strong>. Kontroller at drakten bare kan flippe venstre-høyre.</p>\n</li>\n<li>\n<p>Lag fire nye figurer fra bildene (be om hjelp hvis du ikke har\ndisse) <strong>frantic-felix/top</strong>, <strong>frantic-felix/bottom</strong>,\n<strong>frantic-felix/left</strong>, og <strong>frantic-felix/right</strong>. Disse figurene\nskal bli berøringssensor. Gi de nye figurene navnene <strong>topp</strong>,\n<strong>bunn</strong>, <strong>venstre</strong>, og <strong>høyre</strong>. Kontroller at draktene deres\nikke kan flippes eller roteres.</p>\n</li>\n<li>\n<p>Lag fire variabler (for hver av figurene): <code class=\"blockdata\">blokkert topp</code>, <code class=\"blockdata\">blokkert bunn</code>, <code class=\"blockdata\">blokkert høyre</code> og <code class=\"blockdata\">blokkert venstre</code>.</p>\n</li>\n<li>\n<p>Lag dette skriptet for hver av sensorene:</p>\n<pre><code class=\"language-blocks\"><span class=\"hljs-keyword\">n</span>år <span class=\"hljs-keyword\">gr</span>ønt flagg klikkes <span class=\"hljs-comment\">// eksempel for høyre sensor</span>\n<span class=\"hljs-keyword\">for</span> alltid\n  <span class=\"hljs-keyword\">g</span>å til [Felix v]\n    hvis &lt;farge [rø<span class=\"hljs-keyword\">d</span> v] berører [<span class=\"hljs-keyword\">gr</span>ønn v] ?&gt;\n    sett [blokkert <span class=\"hljs-keyword\">h</span>øyre v] til [1]\n    ellers\n    sett [blokkert <span class=\"hljs-keyword\">h</span>øyre v] til [0]\n    slutt\nslutt\n</code></pre>\n</li>\n<li>\n<p>Endre variablene for hver av sensorene. Den nederste sensoren\ntrenger en <strong>eller</strong> kloss slik at den setter <strong>blokkert bunn</strong> hvis\nden berører grønn eller svart.</p>\n</li>\n</ul>\n<p><strong>Tips</strong>: Det er enklere å velge fargene i én figur, for så å kopiere\nskriptet over til de andre figurene og oppdatere variablene som blir\nsatt. Da slipper du å finne de riktige fargene fire ganger.  Inntil\nvidere trenger Felix bare et skript for å følge musepekeren evig.</p>\n</section>\n<section class=\"flag\" id=\"test-prosjektet\">\n<h2 class=\"flag\" id=\"test-prosjektet\">Test prosjektet</h2>\n<figure><strong>Trykk på det grønne flagget.</strong></figure>\n<p>Du bør se at Felix følger etter musepekeren, omringet av et rødt\nrektangel. Rektangelet er en berøringssensor. Hvis du følger med på\nvariablene, ser du at de endrer seg når du drar Felix rundt og når han\nberører ulike deler av skjermen. For øyeblikket beveger Felix seg\ngjennom plattformene og grønne hindre. Det skal vi fikse nå.</p>\n</section>\n</section>\n<section class=\"activity\" id=\"steg-2-bevegelse-gulv-og-falling\">\n<h1 class=\"activity\" id=\"steg-2-bevegelse-gulv-og-falling\">Steg 2: Bevegelse, gulv og falling</h1>\n<section class=\"check\" id=\"sjekkliste-2\">\n<h2 class=\"check\" id=\"sjekkliste-2\">Sjekkliste</h2>\n<ul>\n<li>\n<p>Neste steg er å få Felix til å gå. Vi bruker <strong>venstre</strong> og <strong>høre\npiltast</strong> for å flytte ham til venstre og høyre. Hvis han ikke står\npå et gulv, faller han ned (vi fikser hopping etterpå). Vi vil at\nnår man trykker på venstre piltast, så skal Felix peke til venstre\nog flytter seg litt. Men vi vil ikke at han skal flytte seg hvis det\ner en hindring i veien.</p>\n</li>\n<li>\n<p>Vi kunne brukt <code class=\"blockevents\">når tast trykkes</code> for å flytte Felix,\nmen det gir en hakkete bevegelse. Det blir en mykere bevegelse hvis\ndu bruker <code class=\"blockcontrol\">hvis</code><code class=\"blocksensing\">tast pil venstre trykket?</code>-klosser i en <code class=\"blockcontrol\">for alltid</code>-løkke.  Berøringssensorer betyr at vi må\nteste <strong>blokkert venstre</strong> variabelen i <code class=\"blockcontrol\">hvis</code>, og\nbruke en <strong>og kloss</strong> slik at Felix bare beveger seg til venstre når\nman trykker på en tast og <strong>blokkert venstre</strong> er 0. Vi må gjøre\ntilsvarende for bevegelse til høyre.</p>\n</li>\n<li>\n<p>Vi kunne animere Felix sine bein i samme kloss, men da beveger de\nseg for raskt. Gjør animasjonen i en egen <code class=\"blockcontrol\">for alltid</code>-løkke under en annen <code class=\"blockevents\">når grønt flagg klikkes</code>-hatt.</p>\n</li>\n<li>\n<p>Det siste vi må gjøre er å ordne <strong>falling</strong>. Hvis Felix ikke står\npå fast grunn vil vi at han skal falle ned. Det ordner vi med en\n<code class=\"blockcontrol\">for alltid</code>-løkke under en <code class=\"blockevents\">når grønt flagg klikkes</code>-hatt.</p>\n<pre><code class=\"language-blocks\"><span class=\"hljs-keyword\">n</span>år <span class=\"hljs-keyword\">gr</span>ønt flagg klikkes <span class=\"hljs-comment\">// håndter flytting</span>\n<span class=\"hljs-keyword\">for</span> alltid\n    hvis &lt; &lt;tast [pil venstre v] trykket?&gt; og ((blokkert venstre)=(0))&gt;\n    pek i retning (-90)\n        <span class=\"hljs-keyword\">g</span>å (2) steg\n    slutt\n    hvis &lt; &lt;tast [pil <span class=\"hljs-keyword\">h</span>øyre v] trykket?&gt; og ((blokkert <span class=\"hljs-keyword\">h</span>øyre)=(0))&gt;\n    pek i retning (90)\n        <span class=\"hljs-keyword\">g</span>å (2) steg\n    slutt\nslutt\n\n<span class=\"hljs-keyword\">n</span>år <span class=\"hljs-keyword\">gr</span>ønt flagg klikkes <span class=\"hljs-comment\">// beveg Felix</span>\n<span class=\"hljs-keyword\">for</span> alltid\n  hvis &lt; &lt;tast [pil venstre v] trykket?&gt; eller &lt;tast [pil <span class=\"hljs-keyword\">h</span>øyre v] trykket?&gt; &gt;\n      neste drakt\n        vent (0.1) sekunder\n    slutt\nslutt\n\n<span class=\"hljs-keyword\">n</span>år <span class=\"hljs-keyword\">gr</span>ønt flagg klikkes <span class=\"hljs-comment\">// håndter falling</span>\n<span class=\"hljs-keyword\">for</span> alltid\n    hvis &lt;(blokkert bunn)=(0)&gt;\n        endre y med (-2)\n    slutt\nslutt\n</code></pre>\n</li>\n</ul>\n</section>\n<section class=\"flag\" id=\"test-prosjektet-ditt\">\n<h2 class=\"flag\" id=\"test-prosjektet-ditt\">Test prosjektet ditt</h2>\n<p><strong>Bruk musen for å dra Felix et sted på scenen og trykk så på det\ngrønne flagget</strong>. Hvis Felix hopper til muspekeren, må du fjerne det\nskriptet!  Du bør kunne bruke venstre og høyre knapper for å få Felix\ntil å gå fra side til side. Hvis han ikke står på gulvet, bør han\nfalle sakte nedover.</p>\n<ul>\n<li>Vi vil også at berøringssensorene ikke skal vises. Det er ikke mulig\nå bruke en skjult blokk, for da vil ingen berøringer bli\noppdaget. Istedet, legg til en <code class=\"blocklooks\">sett gjennomsiktig effekt til 100</code>-kloss rett under den grønn flag hatt'en i hver\nkollisjonssensor. Dette gjør figuren gjennomsiktig, uten å å skjule\nden.</li>\n</ul>\n</section>\n<section class=\"flag\" id=\"test-prosjektet-ditt-2\">\n<h2 class=\"flag\" id=\"test-prosjektet-ditt-2\">Test prosjektet ditt</h2>\n<p><strong>Nå du klikker på det grønne flagget</strong>, skal kollisjonssensorene\nforsvinne. De dukker opp igjen når du trykker på det røde\nstoppskiltet.</p>\n</section>\n</section>\n<section class=\"activity\" id=\"steg-3-hopping\">\n<h1 class=\"activity\" id=\"steg-3-hopping\">Steg 3: Hopping</h1>\n<figure><strong>Det er et par utfordringer med hopping.</strong></figure>\n<ul>\n<li>\n<p>Vi vil ikke at Felix <strong>faller</strong> hvis han er <strong>på vei opp</strong>.</p>\n</li>\n<li>\n<p>Vi vil ikke at Felix skal hindres av gulv når han er på vei opp, men\nvi vil fortsatt at han skal stoppes av gulvet når han <strong>er på vei\nned</strong>.</p>\n</li>\n<li>\n<p>Vi vil ikke at Felix skal _<em>hoppe opp</em> i undersiden av et <strong>grønt\nhinder</strong>.</p>\n</li>\n<li>\n<figure>Vi vil at hoppet skal være en myk bevegelse, så vi vil ikke at Felix\nflytter seg for raskt.</figure>\n</li>\n<li>\n<p>Felix skal bare kunne hoppe hvis han <strong>står på gulvet</strong>. Spillet\nblir litt for enkelt hvis Felix kan hoppe fra løse luften.</p>\n</li>\n</ul>\n<section class=\"check\" id=\"sjekkliste-3\">\n<h2 class=\"check\" id=\"sjekkliste-3\">Sjekkliste</h2>\n<ul>\n<li>\n<p>Det som gjenstår nå, er å få Felix til å hoppe. La oss bruke\n<strong>mellomromstasten</strong> for å få Felix til å hoppe.</p>\n</li>\n<li>\n<p>For å kontrollere hoppet, bruker vi en ny variabel,\n<code class=\"blockdata\">hopphøyde</code>. Hvis denne er høyere enn 0, er Felix på vei\nopp. Hvis den er 0, faller han (eller har falt), som beskrevet over.</p>\n</li>\n<li>\n<p>Vi vil at Felix skal hoppe opp til <strong>100 pixler</strong>. Legg til en ny\n<code class=\"blockcontrol\">hvis</code>-kloss inni <code class=\"blockcontrol\">for alltid</code>-klossen\nsom håndterer tastetrykk. Hvis vi trykker <strong>mellomromstasten</strong> og\nFelix står på gulvet (variablen <code class=\"blockdata\">blokkert under</code> er satt\ntil 1, så setter vi <code class=\"blockdata\">hopphøyde</code> til 100.</p>\n</li>\n<li>\n<p>Vi må endre falle-skriptet. I <code class=\"blockcontrol\">for alltid</code>, trenger\nvi en <code class=\"blockcontrol\">hvis-ellers</code>-kloss som oppdater hvis Felix\nhopper opp eller ikke. Kravet for denne\n<code class=\"blockcontrol\">hvis-ellers</code>-klossen er at hvis\n<code class=\"blockdata\">hopphøyde</code> er <strong>større enn 0</strong>. Den eksisterende faller\nned <code class=\"blockcontrol\">hvis</code>-klossen går inn i ellers-delen av den nye\n<code class=\"blockcontrol\">hvis-ellers</code>-klossen.</p>\n</li>\n<li>\n<p>Når vi vet at Felix hopper opp, må vi sjekke om hodet hans treffer\nnoe. Hvis <code class=\"blockdata\">blokkert topp</code> er <strong>1</strong>, sett\n<code class=\"blockdata\">hopphøyde</code> til <strong>0</strong>. (Dette gjør at Felix ikke kan\nhoppe inn i hindringer). <strong>Ellers, flytt Felix opp 10 og reduser\nhopphøyde med 10.</strong></p>\n</li>\n<li>\n<p>Du ender opp med noe tilsvarende dette:</p>\n<pre><code class=\"language-blocks\">når grønt flagg klikkes // håndtere falling\nfor alltid\n  hvis <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">(hopphøyde)=(0)</span>&gt;</span>\n    hvis <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">(blokkert</span> <span class=\"hljs-attribute\">topp</span>)=<span class=\"hljs-value\">(1)</span>&gt;</span>\n      sett (hopphøyde) til (0)\n        ellers\n      endre y med (10)\n            endre [hopphøyde v] med (-10)\n        slutt\n    ellers\n    hvis <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">(blokkert</span> <span class=\"hljs-attribute\">bunn</span>)=<span class=\"hljs-value\">(0)</span>&gt;</span>\n      endre y med (-2)\n        slutt\n    slutt\nslutt\n</code></pre>\n</li>\n</ul>\n</section>\n<section class=\"flag\" id=\"test-prosjektet-ditt-3\">\n<h2 class=\"flag\" id=\"test-prosjektet-ditt-3\">Test prosjektet ditt</h2>\n<p><strong>Trykk på det grønne flagget</strong>. Kan Felix hoppe? Hopper han fra en\nplattform til en annen? Faller han hvis han går over kanten? Hva om\nhan hopper oppover over kanten av en plattform? Hva om han prøver å\nhoppe under den grønne blokken til høyre? Hva skjer når du trykker på\nmellomromstasten mens Felix faller?</p>\n</section>\n</section>\n<section class=\"activity\" id=\"steg-4-nokler-og-mal\">\n<h1 class=\"activity\" id=\"steg-4-nokler-og-mal\">Steg 4: Nøkler og mål</h1>\n<p><strong>Vi har klart å få Felix til å bevege seg rundt i verdenen. Nå må vi\nfå han til å klare ett nivå</strong>.</p>\n<p>Vi plasserer tre nøkler rundt i hulen. Felix kan plukke dem opp ved å\ngå til dem. Når han har samlet alle tre, kan han klatre til en\nredningskapsel og redde seg selv ut av hulen.</p>\n<ul>\n<li>\n<p>Vi lager en ny variabel, <code class=\"blockdata\">nøkler igjen</code>, som holder\norden på hvor mange nøkler som gjenstår. Et nytt skript på\n<strong>scenen</strong> skal sette denne til <strong>3</strong> når det <strong>grønne flagget</strong>\nklikkes.</p>\n</li>\n<li>\n<p>Både nøklene og redningskapselen må være figurer. (Bruk\n<strong>frantic-felix/key</strong> for nøklene og <strong>frantic-felix/escape-pod</strong>\nfor kapselen.)</p>\n</li>\n<li>\n<p>Hver nøkkel trenger <strong>to skript</strong>: det første plasserer nøklen på\nriktig sted, med størrelse og vinkel, og en <code class=\"blockcontrol\">for alltid</code>-løkke for å endre fargen (som gjør det\nenklere å se den på skjermen). Det andre skriptet er en <code class=\"blockcontrol\">for alltid</code>-løkke som venter til Felix kommer bort til\nnøkkelen. Når dette skjer, skjuler skiptet nøkkelen og reduserer\nantall nøkler.</p>\n</li>\n<li>\n<p>Redningskapselen er et litt vanskeligere skript. Den bruker en <code class=\"blockcontrol\">for alltid</code>-løkke for å vente på at <code class=\"blockdata\">nøkler igjen</code> blir <strong>0</strong>. Med en gang dette skjer, begynner\nkapselen å blinke (for å vise spilleren at de kan komme seg ut). Så\nkan vi bruke en annen <code class=\"blockcontrol\">hvis</code> for å oppdage når Felix\nberører den blinkende redningskapselen. Så snart han gjør det,\nsender kapselen en <code>seier</code>-melding og sier “Du vant!”. Felix svarer\npå meldingen ved å gjemme seg.</p>\n<pre><code class=\"language-blocks\">når grønt flagg klikkes\ngå til x:(<span class=\"hljs-number\">220</span>) y:(-<span class=\"hljs-number\">125</span>)\nfor alltid\n  hvis &lt;(nøkler igjen) = <span class=\"hljs-string\">[0]</span>&gt;\n    endre <span class=\"hljs-string\">[farge v]</span> effekt med (<span class=\"hljs-number\">25</span>)\n        hvis &lt;berører <span class=\"hljs-string\">[Felix v]</span>?&gt;\n      send melding <span class=\"hljs-string\">[seier v]</span>\n            si <span class=\"hljs-string\">[Du vant!]</span>\n        slutt\n    slutt\nslutt\n</code></pre>\n</li>\n</ul>\n<section class=\"flag\" id=\"test-prosjektet-ditt-4\">\n<h2 class=\"flag\" id=\"test-prosjektet-ditt-4\">Test prosjektet ditt</h2>\n<p><strong>Trykk på det grønne flagget</strong>.</p>\n</section>\n</section>\n<section class=\"activity\" id=\"steg-5-slemminger-og-dodelige-omgivelser\">\n<h1 class=\"activity\" id=\"steg-5-slemminger-og-dodelige-omgivelser\">Steg 5: Slemminger og dødelige omgivelser</h1>\n<figure><strong>Nå er det på tide med slemminger!</strong></figure>\n<p>Det skal være to typer farlige ting. En type vil være slemminger som\ngår rundt og skader Felix hvis kan krasjer inn i dem. Den andre typen\ner farlige ting i bakgrunnen.</p>\n<p><strong>La oss først lage en slemming. Den vil bare bevege seg langs en fast\nsti.</strong></p>\n<section class=\"check\" id=\"sjekkliste-4\">\n<h2 class=\"check\" id=\"sjekkliste-4\">Sjekkliste</h2>\n<ul>\n<li>\n<p><strong>Lag en ny figur</strong>, bruk hvilken som helst drakt. Den bør være\nsamme størrelse som Felix (Vi brukte <strong>things/flower-vase</strong> drakt,\nog gjorde den fire steg mindre). Slemmingen trenger bare et enkelt\nskript som beveger den og oppdager om den berører Felix.</p>\n</li>\n<li>\n<p>Lag tre <code class=\"blockcontrol\">hvis</code>-klosser inni en <code class=\"blockcontrol\">for alltid</code>-løkke. Den første sjekker om en slemming\nberører Felix; hvis den gjør det, sender den en <code>tap</code>-melding. De to\nandre <code class=\"blockcontrol\">hvis</code>-klossene sjekker om slemmingen har nådd\nslutten av stien; hvis den har det, snur slemmingen. Tilslutt, tar\nslemmingen to steg. (Ved å bruke <code class=\"blockmotion\">gå</code> isteden for\n<code class=\"blockmotion\">gli</code> -klosser blir det enklere å kontrollere hvor\nraskt slemmingen går.)</p>\n<p><strong>Vi trenger ikke å bruke kollisjonssensor her, da vi ikke bryr\noss om på hvilken side Felix berører slemmingen.</strong></p>\n<pre><code class=\"language-blocks\"><span class=\"hljs-tag\">n</span>å<span class=\"hljs-tag\">r</span> <span class=\"hljs-tag\">gr</span>ø<span class=\"hljs-tag\">nt</span> <span class=\"hljs-tag\">flagg</span> <span class=\"hljs-tag\">klikkes</span>\n<span class=\"hljs-tag\">g</span>å <span class=\"hljs-tag\">til</span> <span class=\"hljs-tag\">x</span><span class=\"hljs-pseudo\">:(-50)</span> <span class=\"hljs-tag\">y</span><span class=\"hljs-pseudo\">:(47)</span>\n<span class=\"hljs-tag\">pek</span> <span class=\"hljs-tag\">i</span> <span class=\"hljs-tag\">retning</span> (<span class=\"hljs-tag\">-90</span>)\n<span class=\"hljs-tag\">for</span> <span class=\"hljs-tag\">alltid</span>\n  <span class=\"hljs-tag\">hvis</span> &lt;<span class=\"hljs-tag\">ber</span>ø<span class=\"hljs-tag\">rer</span> <span class=\"hljs-attr_selector\">[Felix v]</span>?&gt;\n    <span class=\"hljs-tag\">send</span> <span class=\"hljs-tag\">melding</span> <span class=\"hljs-attr_selector\">[tap v]</span>\n    <span class=\"hljs-tag\">slutt</span>\n    <span class=\"hljs-tag\">hvis</span> &lt; (<span class=\"hljs-tag\">x-posisjon</span>) &gt; <span class=\"hljs-attr_selector\">[-200]</span> &gt;\n    <span class=\"hljs-tag\">pek</span> <span class=\"hljs-tag\">i</span> <span class=\"hljs-tag\">retning</span> (90)\n    <span class=\"hljs-tag\">slutt</span>\n    <span class=\"hljs-tag\">hvis</span> &lt; (<span class=\"hljs-tag\">x-posisjon</span>) &gt; <span class=\"hljs-attr_selector\">[-50]</span> &gt;\n    <span class=\"hljs-tag\">pek</span> <span class=\"hljs-tag\">i</span> <span class=\"hljs-tag\">retning</span> (<span class=\"hljs-tag\">-90</span>)\n    <span class=\"hljs-tag\">slutt</span>\n    <span class=\"hljs-tag\">g</span>å (2) <span class=\"hljs-tag\">steg</span>\n<span class=\"hljs-tag\">slutt</span>\n</code></pre>\n</li>\n<li>\n<p>Legg skript til både Felix og redningskapselen slik at den svarer på\n<code>tap</code>-meldingen. Felix skal bare skjule seg selv.  Kapselen skal si\n&quot;Du tapte!&quot;.</p>\n</li>\n</ul>\n</section>\n<section class=\"flag\" id=\"test-prosjektet-ditt-5\">\n<h2 class=\"flag\" id=\"test-prosjektet-ditt-5\">Test prosjektet ditt</h2>\n<p><strong>Trykk på det grønne flagget</strong>. Beveger vasen seg? Stopper den og\nsnur ved kanten? Hva skjer når Felix går inn i den? Hva skjer hvis\nFelix hopper på den, fra oversiden eller undersiden? Forsvinner Felix?\nSier kapselen ifra når du har tapt? Kan du forstatt vinne spillet?</p>\n<ul>\n<li>\n<p><strong>Neste, farlige ting!</strong> La oss si at alt som er lyseblå er dødlig\nfor Felix. Last inn bakgrunnen <strong>frantic-felix/level2</strong>, som har en\nblå rose på det øverste nivået. Legg til enda et skript på Felix,\nunder et grønt flagg hatt:</p>\n<pre><code class=\"language-blocks\"><span class=\"hljs-keyword\">for</span> alltid\n    hvis &lt;berører fargen [blå v]<span class=\"hljs-preprocessor\">?&gt;</span>\n        <span class=\"hljs-built_in\">send</span> melding [spill slutt v]\n    slutt\nslutt\n</code></pre>\n</li>\n</ul>\n</section>\n<section class=\"flag\" id=\"test-prosjektet-ditt-6\">\n<h2 class=\"flag\" id=\"test-prosjektet-ditt-6\">Test prosjektet ditt</h2>\n<p><strong>Trykk på det grønne flagget</strong>. Dør Felix hvis han kommer borti den\nblå rosen? Hva skjer når han berører andre ting?</p>\n</section>\n<section id=\"oppsummering\">\n<h2 id=\"oppsummering\">Oppsummering</h2>\n<p><strong>Det du har laget nå er et veldig enkelt plattformspill. Akkurat nå,\ner det et ganske kjedelig spill. Men det er ikke poenget. Dette\nspillet er en verktøykasse som du kan bruke til å lage egne spill og\nbrett. I neste del skal du lage egne brett.</strong></p>\n</section>\n</section>\n<section id=\"del-2-brettdesign\">\n<h1 id=\"del-2-brettdesign\">Del 2: Brettdesign</h1>\n<p><strong>Forrige gang bygde du alle delene et plattformspill består av. Nå\nskal du bruke disse delene for å lage egne brett..</strong></p>\n<p>Kort oppsummert gjorde du:</p>\n<ul>\n<li>\n<p>Felix kan gå til venstre og høyre og han kan hoppe.</p>\n</li>\n<li>\n<p>Felix faller ned hvis han ikke står på gulvet.</p>\n</li>\n<li>\n<p>Felix kan ikke gå gjennom grønne hindere.</p>\n</li>\n<li>\n<p>Blå ting i bakgrunnen og slemminger tar livet av Felix.</p>\n</li>\n<li>\n<p>Slemminger beveger seg i faste ruter.</p>\n</li>\n<li>\n<p>Slemminger kan ta livet av Felix hvis han kommer borti dem.</p>\n</li>\n<li>\n<p>Felix kan samle nøkler ved å gå bort til dem.</p>\n</li>\n<li>\n<figure>Når Felix har samlet alle nøklene, kommer en redningskapsel til syne\nog han kan rømme i sikkerhet (eller til neste nivå).</figure>\n</li>\n</ul>\n<p>Dette kan være byggeklossene dine. <strong>Bruk dem til å lage egne brett.</strong></p>\n<figure>Du kan lage en hel rekke med brett som Felix må klare. Neste gang skal\nvi se på hvordan vi kan knytte brettene sammen.</figure>\n<p>Brett kan ha store eller små plattformer, mange eller få\nplattformer. Det kan være mange slemminger eller ingen. Det kan være\nmange hindringer eller dødelige ting i bakgrunnen. Prøv å lage flere\nmåter man kan klare brettet på, selv om et kanskje er enklere enn et\nannet. Tenk over hvor vanskelig eller enkelt brettet er.</p>\n<p>Du kan endre de spesielle fargene (svart, grønn og blå), men da må du\n<strong>oppdatere fargeberøringsblokkene</strong> i alle skriptene. Det må være\nsamme farge i alle brett. (Du kunne hatt forskjellige farger i\nforskjellige brett, men det betyr at du måtte legge inn mange\n<code class=\"blockoperators\">eller</code>-klosser rundt fargeberøringsblokkene.)</p>\n<p><strong>Test brettene dine</strong>. Hvis du har tid, opprett brett i Scratch og\nspill dem. Sjekk at de ikke er <strong>for vanskelige</strong> og <strong>ikke for\nenkle</strong>. Hvis du programmerer brettene, må du <strong>lagre bakgrunnen du\nlager</strong> og notere <strong>start posisjon</strong> for Felix, nøkler, og eventuelle\nslemminger. I tillegg må du huske retningen slemmingene beveger seg i\nog hvor langt de går.</p>\n<figure>Hvis du har laget et par brett og lagt dem inn i Scratch, prøv disse\nekstraoppgavene:</figure>\n<section class=\"challenge\" id=\"utvidelse-tramping\">\n<h2 class=\"challenge\" id=\"utvidelse-tramping\">Utvidelse: Tramping</h2>\n<p><strong>Hva om slemmingene døde hvis de ble trampet på?</strong> Kanskje du kan\nlegge til et skript på slemmingene som gjør noe hvis slemmingen\nberører den nederste kollisjonssensoren.</p>\n</section>\n<section class=\"challenge\" id=\"utvidelse-kraftpiller\">\n<h2 class=\"challenge\" id=\"utvidelse-kraftpiller\">Utvidelse: Kraftpiller</h2>\n<p><strong>Du kan lage en “kraftpille” som gjør at Felix kan ødelegge slemmingene</strong>. Når Felix tar kraftpillen, ødelegger Felix slemmingene han berører. Effekten går over etterhvert</p>\n<p>Det er opp til deg hvordan du får dette til å fungere. Kanskje vil du at slemmingene skal endre utseende når Felix kan ta dem?</p>\n</section>\n<section class=\"flag\" id=\"test-prosjektet-ditt-7\">\n<h2 class=\"flag\" id=\"test-prosjektet-ditt-7\">Test prosjektet ditt</h2>\n<p><strong>Trykk på det grønne flagget</strong>.</p>\n</section>\n<section id=\"del-3-sett-sammen-spillet\">\n<h2 id=\"del-3-sett-sammen-spillet\">Del 3: Sett sammen spillet</h2>\n<p><strong>Nå har du noen brett. Du har nok verktøy til å få dem til å\nfungere. Det siste vi må gjøre er å sette delene sammen til et ferdig\nspill!</strong> Hvis du klarer å sette sammen brettene kjapt, kan du ta en\ntitt på aktivitet 2 and 3 før du begynner å spille spillet ditt.</p>\n</section>\n</section>\n<section class=\"activity\" id=\"steg-1-vise-et-nytt-brett\">\n<h1 class=\"activity\" id=\"steg-1-vise-et-nytt-brett\">Steg 1: Vise et nytt brett</h1>\n<p><strong>Når Felix klarer ett brett, må vi flytte til neste</strong>. Det betyr at\nvi må få redningskapselen til å sende en <code>start brett</code>-melding\n(istedet for <code>seier</code>-meldingen) når Felix har funnet alle nøklene og\nklatret inn i kapselen. Vi kan bruke start brett melding for å\nklargjøre neste brett. Vi trenger også en variabel, <code class=\"blockdata\">nåværende nivå</code>, som settes av redningskapselen før den sender\n<code>start brett</code>-melding.</p>\n<p>Alt må stort sett svare på <code>start brett</code>-meldinger for å klargjøre\nneste brett.</p>\n<p><strong>Scenen</strong> må vise riktig bakgrunn. Hver av slemmingene, alle nøkler,\nog redningskapselen trenger å flytte til <strong>riktig start\nposisjon</strong>. Slemmingenes rute trenger <strong>oppdatering</strong>. Felix må\nflyttes til sin <strong>nye startposisjon</strong>. Først da er brettet klart til\nstart.</p>\n<p>De fleste figurene må svare på <code>start brett</code>-meldingen istedet for det\ngrønne flagget. Det betyr at du må <strong>endre hatt-klossene</strong> i de fleste\nskript.</p>\n<section class=\"flag\" id=\"test-prosjektet-ditt-8\">\n<h2 class=\"flag\" id=\"test-prosjektet-ditt-8\">Test prosjektet ditt</h2>\n<p><strong>Fortsett å teste spillet etter hver endring. Husk å teste de delene\nsom du allerede har endret, slik at de fortsatt virker som planlagt.</strong></p>\n<figure>Vi kommer ikke beskrive alle endringene, men vi skal vise hvordan\nFelix sitt oppdaterte skript for å vise hva som må gjøres.</figure>\n<pre><code class=\"language-blocks\">når jeg mottar [<span class=\"hljs-operator\"><span class=\"hljs-keyword\">start</span> brett v]\n    <span class=\"hljs-keyword\">g</span>å til x: (<span class=\"hljs-keyword\">element</span> [<span class=\"hljs-keyword\">n</span>åværende nivå v] av [xs v]) y: (<span class=\"hljs-keyword\">element</span> [<span class=\"hljs-keyword\">n</span>åværende nivå v] av [ys v])\npek <span class=\"hljs-keyword\">i</span> retning (<span class=\"hljs-keyword\">element</span> [<span class=\"hljs-keyword\">n</span>åværende nivå v] av [retning v])\n<span class=\"hljs-keyword\">for</span> alltid\n  hvis &lt;&lt;tast[pil venstre v] trykket?&gt; og &lt;(blokkert venstre)=(<span class=\"hljs-number\">0</span>)&gt;\n    pek <span class=\"hljs-keyword\">i</span> retning (-<span class=\"hljs-number\">90</span>)\n        <span class=\"hljs-keyword\">g</span>å (<span class=\"hljs-number\">2</span>) steg\n    slutt\n    hvis &lt;&lt;tast [pil høyre v] trykket?&gt; og &lt;(blokkert høyre)=(<span class=\"hljs-number\">0</span>)&gt;\n        pek <span class=\"hljs-keyword\">i</span> retning (<span class=\"hljs-number\">90</span>)\n        <span class=\"hljs-keyword\">g</span>å (<span class=\"hljs-number\">2</span>) steg\n    slutt\n    hvis &lt;&lt;tast [mellomrom v] trykket?&gt; og &lt;(blokkert bunn)=(<span class=\"hljs-number\">1</span>)&gt;\n    sett [hopphøyde v] til [<span class=\"hljs-number\">100</span>]\n    slutt\nslutt\n</span></code></pre>\n<p>Du legger kanskje merke til at start verdiene <strong>x</strong>, <strong>y</strong>, og\n<strong>retning</strong> for Felix settes med lister. Vi laget noen lister for hver\nfigur (hver liste privat til den figuren) for å lagre verdiene vi\ntrenger for den figuren. Du trenger en liste for hver ting du\nlagrer. Du trenger ikke bruke lister, du kan bruke\n<code class=\"blockcontrol\">hvis</code>-klosser som sjekker hvilket brett du er på og\ngjør riktig ting basert på dette.</p>\n<p>Og her er redningskapselen, som håndterer all nivå-endringen:</p>\n<pre><code class=\"language-blocks\">når grønt flagg klikkes\nsett <span class=\"hljs-string\">[nåværende nivå v]</span> til <span class=\"hljs-string\">[1]</span>\nsend melding <span class=\"hljs-string\">[start brett v]</span>\n\nnår jeg mottar <span class=\"hljs-string\">[start brett v]</span>\ngå til x: (element <span class=\"hljs-string\">[nåværende nivå v]</span> av <span class=\"hljs-string\">[xs v]</span>) y: (element <span class=\"hljs-string\">[nåværende nivå v]</span> av <span class=\"hljs-string\">[ys v]</span>)\nfor alltid\n  hvis &lt;<span class=\"hljs-string\">[nøkler å ta v]</span> = <span class=\"hljs-string\">[0]</span>&gt;\n      endre <span class=\"hljs-string\">[farge v]</span> effekt med (<span class=\"hljs-number\">25</span>)\n        hvis &lt;berører <span class=\"hljs-string\">[Felix v]</span>?&gt;\n      hvis &lt;<span class=\"hljs-string\">[nåværende nivå v]</span> = &lt;lengden av <span class=\"hljs-string\">[nøkler per brett v]</span>&gt;\n        si <span class=\"hljs-string\">[Du vant!!]</span>\n                send melding <span class=\"hljs-string\">[seier v]</span>\n                stopp <span class=\"hljs-string\">[alle v]</span> :: control\n            ellers\n        endre <span class=\"hljs-string\">[nåværende nivå v]</span> med (<span class=\"hljs-number\">1</span>)\n                send melding <span class=\"hljs-string\">[start brett v]</span>\n            slutt\n        slutt\n    slutt\nslutt\n</code></pre>\n</section>\n</section>\n<section class=\"activity\" id=\"steg-2-spill\">\n<h1 class=\"activity\" id=\"steg-2-spill\">Steg 2: Spill!</h1>\n<p><strong>Du har laget spill</strong>. De andre i kodeklubben har laget spill. Spill\nde forskjellige spillene! Klarer du å runde deres spill? Kan de andre\nrunde spillet ditt?</p>\n<section class=\"challenge\" id=\"utvidelse-1-flere-liv\">\n<h2 class=\"challenge\" id=\"utvidelse-1-flere-liv\">Utvidelse 1: Flere liv</h2>\n<p>Felix trenger kanskje et par sjanser, eller et par liv for å klare seg\nigjennom brettene. <strong>Legg til en ny figur</strong> med tre drakter, som viser\n<strong>ett</strong>, <strong>to</strong>, og <strong>tre hjerter</strong>.</p>\n<p>Bruk frantic-felix/1-heart, frantic-felix/2-heart, and\nfrantic-felix/3-heart draktene. Plasser figuren i hjørnet av\nscenen. Når det <strong>grønne flagget</strong> blir trykket, skal det vises tre\nhjerter. Hver gang det mottar en tap melding, skal det vises et hjerte\nmindre. Isteden for å vise ingen hjerter, skal figuren skjules og\nsende en <code>slutt over</code>-melding.</p>\n<p><code>spill slutt</code>- og <code>seier</code>-meldinger bør håndteres av en <strong>ny figur</strong>,\nsom <strong>skjules</strong> når det grønne flagget trykkes og viser riktig plakat\nnår <code>spill slutt</code>- og <code>seier</code>-meldinger sendes. Denne figurer skal\nogså stoppe alle skript når den viser seg selv.</p>\n<figure>Du må endre hvordan redningskapselen håndterer vinning og tap, da\ndette er ansvaret for liv og ferdigplakat figurene.</figure>\n<p>Kanskje er slemmingen litt for kjappe på foten, de tar Felix før\nbrettet er kommet igang. Hvis Felix taper mer enn et liv når han\nkommer borti en slemming, <code class=\"blocklooks\">skjul</code> slemmingen så snart den\nsender <code>tap</code>-meldingen. Det gir resten av spillet (inkludert Felix)\ntid å nullstille før slemmingene oppdager en ny kollisjon med Felix.</p>\n</section>\n<section class=\"challenge\" id=\"utvidelse-2-tidsbegrensninger\">\n<h2 class=\"challenge\" id=\"utvidelse-2-tidsbegrensninger\">Utvidelse 2: Tidsbegrensninger</h2>\n<p><strong>Ta tiden på Felix!</strong> Bruk et <strong>Timer Scratchkort</strong> for å legge til\nen tidsbegrensning. Hvis timeren løper ut, sender den <code>spill over</code>-melding. Husk å <strong>nullstille timeren</strong> når et nytt brett\nstarter.</p>\n</section>\n</section>\n";

/***/ }

});
//# sourceMappingURL=frantic_felix.6d0d8aeeace06178fa51.js.map